/**
 * Mock WebSocket Server –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
 */

import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';

const app = express();
const server = createServer(app);

app.use(cors());
app.use(express.json());

// –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocketServer({ server, path: '/ws' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
const clients = new Set();

// –û–±—Ä–∞–∑—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
const mockVacancies = [
  {
    title: 'Senior JavaScript Developer',
    company: 'Tech Solutions',
    category: '–¢–û–ß–ù–û –¢–í–û–Å',
    text: '–ò—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ JS —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å React/Node.js',
    industry: 'IT',
    reason: 'JavaScript, React, –≤—ã—Å–æ–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'
  },
  {
    title: 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Vue.js',
    company: 'Digital Agency',
    category: '–ú–û–ñ–ï–¢ –ë–´–¢–¨', 
    text: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ –∑–Ω–∞–Ω–∏–µ–º Vue.js',
    industry: 'IT',
    reason: 'Vue.js, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥'
  },
  {
    title: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
    company: 'Sales Corp',
    category: '–ù–ï –¢–í–û–Å',
    text: '–ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
    industry: 'Sales',
    reason: '–ù–µ IT'
  }
];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
wss.on('connection', (ws, req) => {
  console.log('üîó –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
  clients.add(ws);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ
  ws.send(JSON.stringify({
    type: 'welcome',
    message: 'Mock WebSocket —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω'
  }));
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  ws.on('message', (data) => {
    try {
      const message = JSON.parse(data.toString());
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (message.type === 'search') {
        handleSearchRequest(ws, message);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });
  
  ws.on('close', () => {
    console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    clients.delete(ws);
  });
  
  ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    clients.delete(ws);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
function handleSearchRequest(ws, message) {
  const { query, category } = message.data;
  console.log(`üîç –ü–æ–∏—Å–∫: "${query}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
  
  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  setTimeout(() => {
    const results = mockVacancies.filter(vacancy => 
      vacancy.title.toLowerCase().includes(query.toLowerCase()) ||
      vacancy.text.toLowerCase().includes(query.toLowerCase())
    );
    
    ws.send(JSON.stringify({
      type: 'search:results',
      data: {
        query,
        results: results.slice(0, 5), // –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total: results.length
      }
    }));
  }, 200 + Math.random() * 300); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 200-500ms
}

// –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
  if (clients.size === 0) return;
  
  const randomVacancy = mockVacancies[Math.floor(Math.random() * mockVacancies.length)];
  const newVacancy = {
    ...randomVacancy,
    id: Date.now() + Math.random(),
    timestamp: new Date().toISOString(),
    is_new: true
  };
  
  console.log('üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', newVacancy.title);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  const message = JSON.stringify({
    type: 'vacancy:new',
    data: newVacancy
  });
  
  clients.forEach(client => {
    if (client.readyState === 1) { // OPEN
      client.send(message);
    }
  });
  
}, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

// HTTP endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app.get('/status', (req, res) => {
  res.json({
    status: 'running',
    clients: clients.size,
    timestamp: new Date().toISOString()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.WS_PORT || 8081;
server.listen(PORT, () => {
  console.log(`üöÄ Mock WebSocket Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket: ws://localhost:${PORT}/ws`);
  console.log(`üåê HTTP Status: http://localhost:${PORT}/status`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});