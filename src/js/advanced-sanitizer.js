// advanced-sanitizer.js - XSS Protection —Å DOMPurify

import DOMPurify from 'dompurify';

(function() {
  'use strict';

  class AdvancedSanitizer {
    constructor() {
      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DOMPurify –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
      this.configs = {
        // –î–ª—è HTML —Å –±–∞–∑–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤–∞–∫–∞–Ω—Å–∏–π)
        richText: {
          ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'mark', 'br', 'p', 'span'],
          ALLOWED_ATTR: ['class'],
          KEEP_CONTENT: true,
          RETURN_DOM: false,
          RETURN_DOM_FRAGMENT: false,
          SANITIZE_DOM: true,
          SAFE_FOR_TEMPLATES: true,
        },

        // –î–ª—è plain text (keywords, channels)
        plainText: {
          ALLOWED_TAGS: [],
          ALLOWED_ATTR: [],
          KEEP_CONTENT: true,
          RETURN_DOM: false,
          SANITIZE_DOM: true,
        },

        // –î–ª—è URL
        url: {
          ALLOWED_TAGS: [],
          ALLOWED_ATTR: [],
          ALLOWED_URI_REGEXP: /^(?:(?:https?|tg):\/\/|mailto:|tel:)/i,
        }
      };

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ sanitization
      this.stats = {
        totalSanitized: 0,
        blocked: 0,
        byType: {
          html: 0,
          text: 0,
          url: 0
        }
      };
    }

    /**
     * Sanitize HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * @param {string} dirty - –í—Ö–æ–¥—è—â–∏–π HTML
     * @returns {string} - –û—á–∏—â–µ–Ω–Ω—ã–π HTML
     */
    sanitizeHTML(dirty) {
      if (!dirty || typeof dirty !== 'string') return '';

      this.stats.totalSanitized++;
      this.stats.byType.html++;

      const cleaned = DOMPurify.sanitize(dirty, this.configs.richText);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
      if (cleaned.length < dirty.length) {
        this.stats.blocked++;
        console.warn('[Sanitizer] Potentially malicious content removed from HTML');
      }

      return cleaned;
    }

    /**
     * Sanitize plain text (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ HTML)
     * @param {string} dirty - –í—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç
     * @returns {string} - –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    sanitizeText(dirty) {
      if (!dirty || typeof dirty !== 'string') return '';

      this.stats.totalSanitized++;
      this.stats.byType.text++;

      const cleaned = DOMPurify.sanitize(dirty, this.configs.plainText);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è text input
      const trimmed = cleaned.trim();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      if (this._hasSuspiciousPatterns(dirty)) {
        this.stats.blocked++;
        console.warn('[Sanitizer] Suspicious patterns detected in text input');
      }

      return trimmed;
    }

    /**
     * Sanitize URL
     * @param {string} url - –í—Ö–æ–¥—è—â–∏–π URL
     * @returns {string} - –û—á–∏—â–µ–Ω–Ω—ã–π URL –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    sanitizeURL(url) {
      if (!url || typeof url !== 'string') return '';

      this.stats.totalSanitized++;
      this.stats.byType.url++;

      const ALLOWED_PROTOCOLS = ['https:', 'http:', 'tg:', 'mailto:', 'tel:'];
      const ALLOWED_DOMAINS = ['t.me', 'telegram.me', 'telegram.org'];

      try {
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
        let normalized = url.trim();

        // –ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è telegram —Å—Å—ã–ª–æ–∫
        if (/^(t\.me|telegram\.me)\//i.test(normalized)) {
          normalized = 'https://' + normalized;
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ URL
        const parsed = new URL(normalized);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        if (!ALLOWED_PROTOCOLS.includes(parsed.protocol)) {
          this.stats.blocked++;
          console.warn('[Sanitizer] Blocked URL with disallowed protocol:', parsed.protocol);
          return '';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ javascript: protocol (double check)
        if (parsed.protocol === 'javascript:') {
          this.stats.blocked++;
          console.warn('[Sanitizer] Blocked javascript: protocol');
          return '';
        }

        // –î–ª—è HTTPS –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (parsed.protocol === 'https:' && parsed.hostname) {
          const hostname = parsed.hostname.toLowerCase();

          // Whitelist: telegram –¥–æ–º–µ–Ω—ã
          if (ALLOWED_DOMAINS.some(domain => hostname === domain || hostname.endsWith('.' + domain))) {
            return parsed.href;
          }

          // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–º–µ–Ω
          if (hostname.match(/^[a-z0-9.-]+\.[a-z]{2,}$/i)) {
            return parsed.href;
          }
        }

        // –î–ª—è tg: protocol
        if (parsed.protocol === 'tg:') {
          return parsed.href;
        }

        // –î–ª—è http: (–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º)
        if (parsed.protocol === 'http:') {
          return parsed.href;
        }

        return parsed.href;

      } catch (e) {
        this.stats.blocked++;
        console.warn('[Sanitizer] Invalid URL blocked:', url);
        return '';
      }
    }

    /**
     * Escape HTML entities (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ sanitizeText –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * @param {string} str - –í—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–æ–∫–∞
     * @returns {string} - –°—Ç—Ä–æ–∫–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ HTML entities
     */
    escapeHTML(str) {
      if (!str || typeof str !== 'string') return '';

      const div = document.createElement('div');
      div.textContent = str;
      return div.innerHTML;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
     * @private
     * @param {string} text
     * @returns {boolean}
     */
    _hasSuspiciousPatterns(text) {
      const suspiciousPatterns = [
        /<script/i,
        /javascript:/i,
        /on\w+\s*=/i, // onclick=, onerror=, etc.
        /<iframe/i,
        /eval\(/i,
        /expression\(/i,
      ];

      return suspiciousPatterns.some(pattern => pattern.test(text));
    }

    /**
     * Sanitize –æ–±—ä–µ–∫—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
     * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
     * @param {Object} fieldTypes - –¢–∏–ø—ã –ø–æ–ª–µ–π {fieldName: 'text'|'html'|'url'}
     * @returns {Object} - –û—á–∏—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
     */
    sanitizeObject(obj, fieldTypes) {
      if (!obj || typeof obj !== 'object') return {};

      const sanitized = {};

      for (const [key, value] of Object.entries(obj)) {
        const type = fieldTypes[key] || 'text';

        switch (type) {
          case 'html':
            sanitized[key] = this.sanitizeHTML(value);
            break;
          case 'url':
            sanitized[key] = this.sanitizeURL(value);
            break;
          case 'text':
          default:
            sanitized[key] = this.sanitizeText(value);
            break;
        }
      }

      return sanitized;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É sanitization
     * @returns {Object}
     */
    getStats() {
      return {
        ...this.stats,
        blockRate: this.stats.totalSanitized > 0
          ? Math.round((this.stats.blocked / this.stats.totalSanitized) * 100)
          : 0
      };
    }

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    resetStats() {
      this.stats = {
        totalSanitized: 0,
        blocked: 0,
        byType: {
          html: 0,
          text: 0,
          url: 0
        }
      };
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ sanitization
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
     */
    test() {
      console.log('üß™ [Sanitizer] Running sanitization tests...');

      const tests = [
        // XSS —Ç–µ—Å—Ç—ã
        {
          name: 'Script tag',
          input: '<script>alert("XSS")</script>',
          method: 'sanitizeHTML',
          shouldBlock: true
        },
        {
          name: 'Event handler',
          input: '<img src=x onerror="alert(\'XSS\')">',
          method: 'sanitizeHTML',
          shouldBlock: true
        },
        {
          name: 'JavaScript protocol',
          input: 'javascript:alert("XSS")',
          method: 'sanitizeURL',
          shouldBlock: true
        },
        {
          name: 'Iframe injection',
          input: '<iframe src="malicious.com"></iframe>',
          method: 'sanitizeHTML',
          shouldBlock: true
        },
        // –í–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã
        {
          name: 'Valid HTML',
          input: '<b>Bold text</b>',
          method: 'sanitizeHTML',
          shouldBlock: false
        },
        {
          name: 'Valid text',
          input: 'Hello World',
          method: 'sanitizeText',
          shouldBlock: false
        },
        {
          name: 'Valid URL',
          input: 'https://t.me/example',
          method: 'sanitizeURL',
          shouldBlock: false
        }
      ];

      const results = tests.map(test => {
        const before = this.stats.blocked;
        const output = this[test.method](test.input);
        const after = this.stats.blocked;
        const wasBlocked = after > before;

        const passed = wasBlocked === test.shouldBlock;

        return {
          name: test.name,
          passed,
          input: test.input,
          output,
          expected: test.shouldBlock ? 'blocked' : 'allowed',
          actual: wasBlocked ? 'blocked' : 'allowed'
        };
      });

      const passedCount = results.filter(r => r.passed).length;
      const totalCount = results.length;

      console.log(`‚úÖ [Sanitizer] Tests passed: ${passedCount}/${totalCount}`);
      console.table(results);

      return {
        passed: passedCount,
        total: totalCount,
        success: passedCount === totalCount,
        results
      };
    }
  }

  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  window.advancedSanitizer = new AdvancedSanitizer();

  // Expose class –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  window.AdvancedSanitizer = AdvancedSanitizer;

  console.log('‚úÖ [Sanitizer] Advanced Sanitizer initialized with DOMPurify');

  // Debug helper –≤ dev mode
  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    window.sanitizerDebug = {
      stats: () => console.table(window.advancedSanitizer.getStats()),
      test: () => window.advancedSanitizer.test(),
      reset: () => window.advancedSanitizer.resetStats()
    };
    console.log('üí° [Sanitizer] Debug helpers available: window.sanitizerDebug');
  }

})();
