/**
 * Telegram Mini App Integration
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ Telegram-specific –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
 */

class TelegramIntegration {
  constructor() {
    this.tg = window.Telegram?.WebApp;
    this.isReady = false;
    this.callbacks = new Map();
    this.apiVersion = null;
    
    if (!this.tg) {
      console.warn('Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é API
    this.detectApiVersion();
    this.init();
  }

  detectApiVersion() {
    if (!this.tg) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ—Ç–æ–¥–∞–º/—Å–≤–æ–π—Å—Ç–≤–∞–º
    if (this.tg.version) {
      this.apiVersion = this.tg.version;
      logger.log(`üì± Telegram WebApp API –≤–µ—Ä—Å–∏—è: ${this.apiVersion}`);
    } else {
      // Fallback –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
      if (this.tg.SettingsButton) {
        this.apiVersion = '6.1+';
      } else {
        this.apiVersion = '6.0';
      }
      logger.log(`üì± Telegram WebApp API –≤–µ—Ä—Å–∏—è (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞): ${this.apiVersion}`);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    const capabilities = {
      SettingsButton: !!this.tg.SettingsButton,
      enableClosingConfirmation: typeof this.tg.enableClosingConfirmation === 'function',
      HapticFeedback: !!this.tg.HapticFeedback,
      MainButton: !!this.tg.MainButton,
      BackButton: !!this.tg.BackButton
    };
    
    logger.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:', capabilities);
  }

  async init() {
    try {
      // –†–∞—Å—à–∏—Ä—è–µ–º Mini App –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      this.tg.expand();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
      this.setupTheme();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
      this.setupUI();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();
      
      // –í–∫–ª—é—á–∞–µ–º closing confirmation —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–µ—Ä—Å–∏–π (6.2+)
      if (this.isClosingConfirmationSupported()) {
        try {
          this.tg.enableClosingConfirmation();
          logger.log('‚úÖ Closing confirmation –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
          console.warn('‚ö†Ô∏è Closing confirmation –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', error.message);
        }
      } else {
        logger.log('‚ÑπÔ∏è Closing confirmation —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é Telegram WebApp API');
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      this.tg.ready();
      this.isReady = true;
      
      logger.log('‚úÖ Telegram Integration –≥–æ—Ç–æ–≤');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Integration:', error);
    }
  }

  setupTheme() {
    if (!this.tg) return;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã Telegram
    const themeParams = this.tg.themeParams;
    const root = document.documentElement;

    if (themeParams.bg_color) {
      root.style.setProperty('--tg-background-color', themeParams.bg_color);
      root.style.setProperty('--background-color', themeParams.bg_color);
    }

    if (themeParams.text_color) {
      root.style.setProperty('--tg-text-color', themeParams.text_color);
      root.style.setProperty('--text-color', themeParams.text_color);
    }

    if (themeParams.button_color) {
      root.style.setProperty('--tg-button-color', themeParams.button_color);
    }

    if (themeParams.button_text_color) {
      root.style.setProperty('--tg-button-text-color', themeParams.button_text_color);
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (themeParams.bg_color === '#212121' || themeParams.bg_color === '#17212b') {
      document.documentElement.setAttribute('data-theme', 'dark');
    } else {
      document.documentElement.setAttribute('data-theme', 'light');
    }
  }

  setupUI() {
    if (!this.tg) return;

    // BackButton –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    this.setupBackButton();
    
    // MainButton –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    this.setupMainButton();
    
    // SettingsButton –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
    this.setupSettingsButton();
  }

  setupBackButton() {
    // BackButton –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    const currentPath = window.location.pathname;
    const isMainPage = currentPath.includes('index.html') || currentPath === '/' || currentPath.endsWith('/oshu_work/');
    
    if (!isMainPage) {
      this.tg.BackButton.show();
      this.tg.BackButton.onClick(() => {
        this.hapticFeedback('light');
        this.navigateBack();
      });
    }
  }

  setupMainButton() {
    // MainButton —Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
    this.tg.MainButton.hide();
  }

  setupSettingsButton() {
    // SettingsButton –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    if (window.location.pathname.includes('settings.html')) {
      return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    }

    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ API - —Ç–æ–ª—å–∫–æ –¥–ª—è 6.1+
    if (!this.tg.SettingsButton) {
      logger.log('‚ÑπÔ∏è SettingsButton –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ Telegram WebApp API –≤–µ—Ä—Å–∏–∏ ' + (this.apiVersion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π'));
      return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥
    if (this.apiVersion && this.apiVersion !== '6.1+') {
      const version = parseFloat(this.apiVersion);
      if (version && version < 6.1) {
        logger.log('‚ÑπÔ∏è SettingsButton —Ç—Ä–µ–±—É–µ—Ç Telegram WebApp API –≤–µ—Ä—Å–∏–∏ 6.1 –∏–ª–∏ –≤—ã—à–µ');
        return;
      }
    }

    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    try {
      if (typeof this.tg.SettingsButton.show === 'function') {
        this.tg.SettingsButton.show();
        
        if (typeof this.tg.SettingsButton.onClick === 'function') {
          this.tg.SettingsButton.onClick(() => {
            this.hapticFeedback('light');
            this.navigateTo('settings.html');
          });
        }
        
        logger.log('‚úÖ SettingsButton –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ SettingsButton:', error.message);
    }
  }

  setupEventHandlers() {
    if (!this.tg) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–º—ã
    this.tg.onEvent('themeChanged', () => {
      this.setupTheme();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π viewport
    this.tg.onEvent('viewportChanged', (event) => {
      this.handleViewportChange(event);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
    this.tg.onEvent('settingsButtonClicked', () => {
      this.handleSettingsClick();
    });
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  navigateTo(page) {
    const baseUrl = window.location.pathname.includes('oshu_work') ? '/oshu_work/' : '/';
    window.location.href = baseUrl + page;
  }

  navigateBack() {
    const baseUrl = window.location.pathname.includes('oshu_work') ? '/oshu_work/' : '/';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    const currentPath = window.location.pathname;
    if (currentPath.includes('favorites.html') || currentPath.includes('settings.html')) {
      window.location.href = baseUrl + 'index.html';
    } else {
      window.history.back();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ closing confirmation
  isClosingConfirmationSupported() {
    if (!this.tg || typeof this.tg.enableClosingConfirmation !== 'function') {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é API
    if (this.apiVersion) {
      const version = parseFloat(this.apiVersion);
      if (version && version < 6.2) {
        return false;
      }
    }

    return true;
  }

  // Haptic Feedback
  hapticFeedback(type = 'light') {
    if (!this.tg?.HapticFeedback) return;

    switch (type) {
      case 'light':
        this.tg.HapticFeedback.impactOccurred('light');
        break;
      case 'medium':
        this.tg.HapticFeedback.impactOccurred('medium');
        break;
      case 'heavy':
        this.tg.HapticFeedback.impactOccurred('heavy');
        break;
      case 'success':
        this.tg.HapticFeedback.notificationOccurred('success');
        break;
      case 'warning':
        this.tg.HapticFeedback.notificationOccurred('warning');
        break;
      case 'error':
        this.tg.HapticFeedback.notificationOccurred('error');
        break;
    }
  }

  // MainButton —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  showMainButton(text, callback) {
    if (!this.tg) return;

    this.tg.MainButton.setText(text);
    this.tg.MainButton.show();
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.tg.MainButton.offClick();
    
    this.tg.MainButton.onClick(() => {
      this.hapticFeedback('medium');
      callback && callback();
    });
  }

  hideMainButton() {
    if (!this.tg) return;
    this.tg.MainButton.hide();
  }

  setMainButtonLoading(isLoading) {
    if (!this.tg) return;
    
    if (isLoading) {
      this.tg.MainButton.showProgress();
    } else {
      this.tg.MainButton.hideProgress();
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É
  sendDataToBot(data) {
    if (!this.tg) return;

    try {
      this.tg.sendData(JSON.stringify(data));
      this.hapticFeedback('success');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É:', error);
      this.hapticFeedback('error');
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
  setupNotificationPreferences(preferences) {
    this.sendDataToBot({
      type: 'notification_setup',
      data: {
        categories: preferences.categories || [],
        keywords: preferences.keywords || [],
        salary_min: preferences.salaryMin || 0,
        schedule: preferences.schedule || 'all_day',
        enabled: preferences.enabled !== false
      },
      timestamp: Date.now()
    });
  }

  subscribeToJob(jobId, jobTitle) {
    this.sendDataToBot({
      type: 'job_subscribe',
      data: {
        job_id: jobId,
        job_title: jobTitle,
        action: 'subscribe'
      },
      timestamp: Date.now()
    });
  }

  unsubscribeFromJob(jobId) {
    this.sendDataToBot({
      type: 'job_subscribe', 
      data: {
        job_id: jobId,
        action: 'unsubscribe'
      },
      timestamp: Date.now()
    });
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  getUserInfo() {
    if (!this.tg?.initDataUnsafe?.user) return null;

    return {
      id: this.tg.initDataUnsafe.user.id,
      first_name: this.tg.initDataUnsafe.user.first_name,
      last_name: this.tg.initDataUnsafe.user.last_name,
      username: this.tg.initDataUnsafe.user.username,
      language_code: this.tg.initDataUnsafe.user.language_code,
      is_premium: this.tg.initDataUnsafe.user.is_premium
    };
  }

  // Utility methods
  handleViewportChange(event) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –≤ Telegram
    const { height, is_expanded } = event;
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ viewport
    document.dispatchEvent(new CustomEvent('telegramViewportChanged', {
      detail: { height, is_expanded }
    }));
  }

  handleSettingsClick() {
    this.navigateTo('settings.html');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  isInTelegram() {
    return !!this.tg;
  }

  isReady() {
    return this.isReady;
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  close() {
    if (this.tg) {
      this.tg.close();
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.telegramIntegration = new TelegramIntegration();

export default window.telegramIntegration;