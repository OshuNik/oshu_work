/**
 * Simple Telegram Bot Notifications - Phase 3.2 Simplified
 * –ü—Ä–æ—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Telegram Mini App
 */

class SimpleBotNotifications {
  constructor() {
    // –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.settings = {
      enabled: localStorage.getItem('notifications-enabled') === 'true',
      categoryFilter: localStorage.getItem('notifications-category') || 'all' // all|main|maybe|other
    };
    
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
   */
  init() {
    console.log('[Simple Bot] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', this.settings);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.setupNotificationButton();
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if (this.settings.enabled) {
      this.setupEventListeners();
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ settings.html
   */
  setupNotificationButton() {
    const button = document.getElementById('notifications-toggle');
    if (!button) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    this.updateButtonState(button);

    // –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª/–≤—ã–∫–ª
    button.addEventListener('click', (e) => {
      e.preventDefault();
      this.toggleNotifications();
      this.updateButtonState(button);
    });

    // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let longPressTimer;
    let isLongPress = false;

    button.addEventListener('mousedown', () => {
      isLongPress = false;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ª–∏–≤–∫–∏
      button.classList.add('long-pressing');
      
      longPressTimer = setTimeout(() => {
        isLongPress = true;
        this.showCategoryMenu();
      }, 800); // 800ms –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    });

    button.addEventListener('mouseup', () => {
      clearTimeout(longPressTimer);
      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ª–∏–≤–∫–∏
      button.classList.remove('long-pressing');
    });

    button.addEventListener('mouseleave', () => {
      clearTimeout(longPressTimer);
      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ª–∏–≤–∫–∏
      button.classList.remove('long-pressing');
    });

    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    button.addEventListener('touchstart', (e) => {
      e.preventDefault();
      isLongPress = false;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ª–∏–≤–∫–∏
      button.classList.add('long-pressing');
      
      longPressTimer = setTimeout(() => {
        isLongPress = true;
        this.showCategoryMenu();
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–ª–≥–æ–º –Ω–∞–∂–∞—Ç–∏–∏
        if (navigator.vibrate) {
          navigator.vibrate(50);
        }
      }, 800);
    });

    button.addEventListener('touchend', (e) => {
      e.preventDefault();
      clearTimeout(longPressTimer);
      
      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ª–∏–≤–∫–∏
      button.classList.remove('long-pressing');
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
      if (!isLongPress) {
        setTimeout(() => {
          this.toggleNotifications();
          this.updateButtonState(button);
        }, 50);
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∫–ª/–≤—ã–∫–ª
   */
  toggleNotifications() {
    this.settings.enabled = !this.settings.enabled;
    localStorage.setItem('notifications-enabled', this.settings.enabled.toString());
    
    if (this.settings.enabled) {
      this.setupEventListeners();
      this.showToast('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');
    } else {
      this.showToast('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫–Ω–æ–ø–∫–∏
   */
  updateButtonState(button) {
    const icon = button.querySelector('i');
    
    if (this.settings.enabled) {
      button.classList.remove('disabled');
      icon.className = 'bi bi-bell-fill';
      button.title = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã (–¥–æ–ª–≥–∏–π –∫–ª–∏–∫ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)';
    } else {
      button.classList.add('disabled');
      icon.className = 'bi bi-bell-slash';
      button.title = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã (–∫–ª–∏–∫ - –≤–∫–ª—é—á–∏—Ç—å)';
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–ª–≥–æ–º –Ω–∞–∂–∞—Ç–∏–∏
   */
  showCategoryMenu() {
    const categories = [
      { id: 'all', name: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', emoji: 'üìù' },
      { id: 'main', name: '–¢–æ—á–Ω–æ —Ç–≤–æ—ë', emoji: 'üéØ' },
      { id: 'maybe', name: '–ú–æ–∂–µ—Ç –±—ã—Ç—å', emoji: 'ü§î' },
      { id: 'other', name: '–ù–µ —Ç–≤–æ—ë', emoji: 'üö´' }
    ];

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const overlay = document.createElement('div');
    overlay.className = 'notification-menu-overlay';
    overlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      z-index: 10000;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: opacity 200ms ease;
    `;

    const menu = document.createElement('div');
    menu.className = 'notification-category-menu';
    menu.style.cssText = `
      background: var(--card-color);
      border: var(--border-width) solid var(--border-color);
      border-radius: 8px;
      padding: 20px;
      max-width: 280px;
      width: 90%;
      box-shadow: var(--box-shadow);
      transform: scale(0.9);
      transition: transform 200ms ease;
    `;

    let menuHTML = '<h3 style="margin-top: 0; font-family: var(--font-pixel); font-size: 14px;">–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò–ó:</h3>';
    
    categories.forEach(category => {
      const isActive = this.settings.categoryFilter === category.id;
      menuHTML += `
        <div class="category-option ${isActive ? 'active' : ''}" data-category="${category.id}" 
             style="
               padding: 12px;
               margin: 8px 0;
               border: 2px solid ${isActive ? 'var(--accent-green)' : 'var(--border-color)'};
               border-radius: 6px;
               cursor: pointer;
               display: flex;
               align-items: center;
               gap: 10px;
               font-family: var(--font-mono);
               background: ${isActive ? 'var(--accent-green)' : 'var(--card-color)'};
               color: ${isActive ? 'white' : 'var(--text-color)'};
               transition: all 150ms ease;
             ">
          <span style="font-size: 16px;">${category.emoji}</span>
          <span>${category.name}</span>
        </div>
      `;
    });

    menu.innerHTML = menuHTML;
    overlay.appendChild(menu);
    document.body.appendChild(overlay);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
      overlay.style.opacity = '1';
      menu.style.transform = 'scale(1)';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
    menu.addEventListener('click', (e) => {
      const option = e.target.closest('.category-option');
      if (option) {
        const category = option.dataset.category;
        this.setCategoryFilter(category);
        this.closeMenu(overlay);
      }
    });

    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) {
        this.closeMenu(overlay);
      }
    });
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  closeMenu(overlay) {
    overlay.style.opacity = '0';
    const menu = overlay.querySelector('.notification-category-menu');
    menu.style.transform = 'scale(0.9)';
    
    setTimeout(() => {
      if (overlay.parentNode) {
        overlay.parentNode.removeChild(overlay);
      }
    }, 200);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  setCategoryFilter(category) {
    this.settings.categoryFilter = category;
    localStorage.setItem('notifications-category', category);
    
    const categoryNames = {
      all: '–≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      main: '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–¢–æ—á–Ω–æ —Ç–≤–æ—ë"',
      maybe: '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–æ–∂–µ—Ç –±—ã—Ç—å"',
      other: '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ù–µ —Ç–≤–æ—ë"'
    };
    
    this.showToast(`üìÇ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ ${categoryNames[category]}`);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
   */
  setupEventListeners() {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    document.addEventListener('vacancy:new', (event) => {
      if (this.shouldShowNotification(event.detail)) {
        this.showVacancyNotification(event.detail);
      }
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  shouldShowNotification(vacancy) {
    if (!this.settings.enabled) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (this.settings.categoryFilter !== 'all') {
      const categoryMap = {
        main: '–¢–û–ß–ù–û –¢–í–û–Å',
        maybe: '–ú–û–ñ–ï–¢ –ë–´–¢–¨',
        other: '–ù–ï –¢–í–û–Å'
      };
      
      const allowedCategory = categoryMap[this.settings.categoryFilter];
      if (vacancy.category !== allowedCategory) {
        return false;
      }
    }
    
    return true;
  }

  /**
   * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  showVacancyNotification(vacancy) {
    console.log('üîî [Bot Integration] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', {
      vacancy: vacancy.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      category: vacancy.category,
      enabled: this.settings.enabled,
      filter: this.settings.categoryFilter,
      shouldShow: this.shouldShowNotification(vacancy)
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
    this.sendTelegramBotNotification(vacancy);

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ toast
    if (window.location.hostname === 'localhost') {
      const emoji = this.getCategoryEmoji(vacancy.category);
      this.showToast(`${emoji} –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`, 4000);
      console.log('‚úÖ [Bot Integration] Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ (localhost)');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Supabase (–ø—Ä–æ—Å—Ç–æ –∫–∞–∫ —Å –æ—à–∏–±–∫–∞–º–∏)
   */
  async sendTelegramBotNotification(vacancy) {
    try {
      console.log('üì± [Bot Integration] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Supabase...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase –∫–ª–∏–µ–Ω—Ç–∞
      if (!window.supabaseClient) {
        console.error('‚ùå [Bot Integration] Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É notifications
      const { data, error } = await window.supabaseClient
        .from('notifications')
        .insert([
          {
            user_id: '1521478462', // –í–∞—à Telegram ID
            vacancy_id: vacancy.id,
            title: vacancy.title || vacancy.reason || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            message: this.formatNotificationMessage(vacancy),
            category: vacancy.category || vacancy.ai_category || '–ù–ï –¢–í–û–Å',
            category_filter: this.settings.categoryFilter,
            enabled: this.settings.enabled,
            status: 'pending', // pending/sent/failed
            created_at: new Date().toISOString()
          }
        ]);

      if (error) {
        console.error('‚ùå [Bot Integration] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      } else {
        console.log('‚úÖ [Bot Integration] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Supabase, –ø–∞—Ä—Å–µ—Ä –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç');
      }

    } catch (error) {
      console.error('‚ùå [Bot Integration] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  formatNotificationMessage(vacancy) {
    const categoryEmoji = {
      '–¢–û–ß–ù–û –¢–í–û–Å': 'üéØ',
      '–ú–û–ñ–ï–¢ –ë–´–¢–¨': 'ü§î', 
      '–ù–ï –¢–í–û–Å': '‚ùå'
    };

    const emoji = categoryEmoji[vacancy.category] || 'üìã';
    
    let message = `${emoji} –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!\n\n`;
    
    if (vacancy.title || vacancy.reason) {
      message += `üíº ${vacancy.title || vacancy.reason}\n`;
    }
    
    if (vacancy.company_name || vacancy.company) {
      message += `üè¢ ${vacancy.company_name || vacancy.company}\n`;
    }
    
    if (vacancy.category) {
      message += `üìÇ ${vacancy.category}\n`;
    }
    
    return message;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getCategoryEmoji(category) {
    const emojiMap = {
      '–¢–û–ß–ù–û –¢–í–û–Å': 'üéØ',
      '–ú–û–ñ–ï–¢ –ë–´–¢–¨': 'ü§î',
      '–ù–ï –¢–í–û–Å': 'üö´'
    };
    return emojiMap[category] || 'üìù';
  }

  /**
   * –ü–æ–∫–∞–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  showToast(message, duration = 2500) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π toast –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingToast = document.querySelector('.simple-toast');
    if (existingToast) {
      existingToast.remove();
    }

    const toast = document.createElement('div');
    toast.className = 'simple-toast';
    toast.style.cssText = `
      position: fixed;
      bottom: 100px;
      left: 50%;
      transform: translateX(-50%) translateY(20px);
      background: var(--card-color);
      color: var(--text-color);
      padding: 12px 20px;
      border-radius: 8px;
      border: 2px solid var(--border-color);
      box-shadow: var(--box-shadow);
      font-family: var(--font-mono);
      font-size: 14px;
      z-index: 10001;
      opacity: 0;
      transition: all 300ms ease;
      max-width: 90%;
      text-align: center;
    `;
    
    toast.textContent = message;
    document.body.appendChild(toast);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
      toast.style.opacity = '1';
      toast.style.transform = 'translateX(-50%) translateY(0)';
    });

    // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
      toast.style.opacity = '0';
      toast.style.transform = 'translateX(-50%) translateY(-20px)';
      
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }, duration);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  getSettings() {
    return { ...this.settings };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
   */
  getStatus() {
    return {
      enabled: this.settings.enabled,
      userId: 'simplified_user',
      chatId: 'simplified_user',
      settings: this.settings,
      quietTime: false
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
window.SimpleBotNotifications = SimpleBotNotifications;

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.botIntegration = new SimpleBotNotifications();

console.log('[Phase 3.2] Simple Bot Notifications –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');