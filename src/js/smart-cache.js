/**
 * Smart Cache Manager –¥–ª—è Telegram Mini App
 * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

class SmartCacheManager {
  constructor() {
    this.CACHE_NAME = 'telegram-oshu-work-v14';
    this.STATIC_CACHE_TIME = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π
    this.DATA_CACHE_TIME = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    this.SEARCH_CACHE_TIME = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    
    this.isSupported = 'caches' in window;
    this.init();
  }

  async init() {
    if (!this.isSupported) {
      console.warn('Cache API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—ç—à–∞
      await caches.open(this.CACHE_NAME);
      
      // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏
      await this.cleanOldCaches();
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      await this.preloadCriticalAssets();
      
      logger.log('‚úÖ Smart Cache Manager –≥–æ—Ç–æ–≤');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Smart Cache:', error);
    }
  }

  // ===================
  // –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ï–°–£–†–°–´
  // ===================

  async preloadCriticalAssets() {
    // –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã (JS/CSS –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    const criticalAssets = [
      '/oshu_work/favicon.ico',
      '/oshu_work/favicon.svg'
    ];

    try {
      const cache = await caches.open(this.CACHE_NAME);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã —É–∂–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã
      const cachedUrls = await cache.keys();
      const cachedUrlStrings = cachedUrls.map(req => req.url);
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
      const missingAssets = criticalAssets.filter(asset => {
        const fullUrl = new URL(asset, window.location.origin).href;
        return !cachedUrlStrings.includes(fullUrl);
      });

      if (missingAssets.length > 0) {
        await cache.addAll(missingAssets);
        logger.log(`üì¶ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ ${missingAssets.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã:', error);
    }
  }

  async cacheStaticAsset(url, response) {
    if (!this.isSupported) return;

    try {
      const cache = await caches.open(this.CACHE_NAME);
      await cache.put(url, response.clone());
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å:', error);
    }
  }

  async getStaticAsset(url) {
    if (!this.isSupported) return null;

    try {
      const cache = await caches.open(this.CACHE_NAME);
      return await cache.match(url);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞:', error);
      return null;
    }
  }

  // ==================
  // –î–ê–ù–ù–´–ï –í–ê–ö–ê–ù–°–ò–ô
  // ==================

  cacheJobData(query, jobs, type = 'search') {
    const cacheKey = this.generateJobCacheKey(query, type);
    const cacheData = {
      data: jobs,
      timestamp: Date.now(),
      ttl: type === 'search' ? this.SEARCH_CACHE_TIME : this.DATA_CACHE_TIME,
      query: query,
      count: jobs.length
    };

    try {
      localStorage.setItem(cacheKey, JSON.stringify(cacheData));
      logger.log(`üì¶ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è "${query}": ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
    }
  }

  getCachedJobData(query, type = 'search') {
    const cacheKey = this.generateJobCacheKey(query, type);
    
    try {
      const cachedDataStr = localStorage.getItem(cacheKey);
      if (!cachedDataStr) return null;

      const cachedData = JSON.parse(cachedDataStr);
      const now = Date.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
      if (now - cachedData.timestamp > cachedData.ttl) {
        localStorage.removeItem(cacheKey);
        return null;
      }

      logger.log(`üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞ –¥–ª—è "${query}": ${cachedData.count} –≤–∞–∫–∞–Ω—Å–∏–π`);
      return cachedData.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:', error);
      return null;
    }
  }

  generateJobCacheKey(query, type) {
    const cleanQuery = typeof query === 'string' ? query : JSON.stringify(query);
    return `job-${type}-${btoa(cleanQuery).slice(0, 20)}-${Date.now().toString().slice(-6)}`;
  }

  // =================
  // –ò–ó–ë–†–ê–ù–ù–´–ï
  // =================

  cacheFavorites(favorites) {
    const cacheData = {
      data: favorites,
      timestamp: Date.now(),
      count: favorites.length
    };

    try {
      localStorage.setItem('favorites-cache', JSON.stringify(cacheData));
      logger.log(`üíñ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ ${favorites.length} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
    }
  }

  getCachedFavorites() {
    try {
      const cachedDataStr = localStorage.getItem('favorites-cache');
      if (!cachedDataStr) return null;

      const cachedData = JSON.parse(cachedDataStr);
      logger.log(`üíñ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞: ${cachedData.count} –≤–∞–∫–∞–Ω—Å–∏–π`);
      return cachedData.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –∫—ç—à–∞:', error);
      return null;
    }
  }

  // =================
  // –ù–ê–°–¢–†–û–ô–ö–ò
  // =================

  cacheSettings(settings) {
    try {
      localStorage.setItem('settings-cache', JSON.stringify({
        data: settings,
        timestamp: Date.now()
      }));
      logger.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
    }
  }

  getCachedSettings() {
    try {
      const cachedDataStr = localStorage.getItem('settings-cache');
      if (!cachedDataStr) return null;

      const cachedData = JSON.parse(cachedDataStr);
      return cachedData.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫—ç—à–∞:', error);
      return null;
    }
  }

  // ===================
  // NETWORK-FIRST FETCH
  // ===================

  async networkFirstFetch(url, options = {}) {
    const cacheKey = url;

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏
      const networkResponse = await fetch(url, {
        ...options,
        cache: 'no-cache' // –í—Å–µ–≥–¥–∞ –∏–¥–µ–º –≤ —Å–µ—Ç—å
      });

      if (networkResponse.ok) {
        // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        await this.cacheStaticAsset(cacheKey, networkResponse);
        return networkResponse.clone();
      }

      throw new Error(`Network response not ok: ${networkResponse.status}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Network fetch failed, trying cache:', error.message);
      
      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cachedResponse = await this.getStaticAsset(cacheKey);
      if (cachedResponse) {
        logger.log('üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏');
        return cachedResponse;
      }

      throw error; // –ï—Å–ª–∏ –∏ –∫—ç—à –ø—É—Å—Ç, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    }
  }

  // ===================
  // CACHE-FIRST FETCH
  // ===================

  async cacheFirstFetch(url, options = {}) {
    const cacheKey = url;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedResponse = await this.getStaticAsset(cacheKey);
    if (cachedResponse) {
      logger.log('üì¶ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞');
      
      // –í —Ñ–æ–Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.updateCacheInBackground(url, options);
      
      return cachedResponse;
    }

    // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –∏–¥–µ–º –≤ —Å–µ—Ç—å
    try {
      const networkResponse = await fetch(url, options);
      
      if (networkResponse.ok) {
        await this.cacheStaticAsset(cacheKey, networkResponse);
      }
      
      return networkResponse;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞:', error);
      throw error;
    }
  }

  async updateCacheInBackground(url, options = {}) {
    try {
      const networkResponse = await fetch(url, options);
      if (networkResponse.ok) {
        await this.cacheStaticAsset(url, networkResponse);
        logger.log('üîÑ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ–Ω–µ –¥–ª—è:', url);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –≤ —Ñ–æ–Ω–µ:', error);
    }
  }

  // =================
  // PREFETCH
  // =================

  async prefetchJobPages(currentPage = 1, totalPages = 5) {
    const pagesToPrefetch = [];
    
    // –ü—Ä–µ—Ñ–µ—Ç—á–∏–º —Å–ª–µ–¥—É—é—â–∏–µ 2-3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for (let i = 1; i <= 3; i++) {
      const nextPage = currentPage + i;
      if (nextPage <= totalPages) {
        pagesToPrefetch.push(nextPage);
      }
    }

    logger.log(`üîÆ –ü—Ä–µ—Ñ–µ—Ç—á–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pagesToPrefetch.join(', ')}`);

    // –ü—Ä–µ—Ñ–µ—Ç—á–∏–º –≤ —Ñ–æ–Ω–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    pagesToPrefetch.forEach((page, index) => {
      setTimeout(() => {
        this.prefetchJobPage(page);
      }, index * 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    });
  }

  async prefetchJobPage(page) {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API endpoint
      const url = `/api/jobs?page=${page}&limit=20`;
      const response = await fetch(url, { cache: 'no-cache' });
      
      if (response.ok) {
        const data = await response.json();
        this.cacheJobData(`page-${page}`, data.jobs, 'prefetch');
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ—Ñ–µ—Ç—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}:`, error);
    }
  }

  // =================
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–≠–®–ï–ú
  // =================

  async cleanOldCaches() {
    if (!this.isSupported) return;

    try {
      const cacheNames = await caches.keys();
      const oldCacheNames = cacheNames.filter(name => 
        name.startsWith('telegram-oshu-work-') && name !== this.CACHE_NAME
      );

      await Promise.all(
        oldCacheNames.map(cacheName => caches.delete(cacheName))
      );

      if (oldCacheNames.length > 0) {
        logger.log(`üßπ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏: ${oldCacheNames.join(', ')}`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏:', error);
    }
  }

  clearJobDataCache() {
    try {
      const keys = Object.keys(localStorage).filter(key => key.startsWith('job-'));
      keys.forEach(key => localStorage.removeItem(key));
      logger.log(`üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π: ${keys.length} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  async clearAllCaches() {
    try {
      // –û—á–∏—â–∞–µ–º Cache API
      const cacheNames = await caches.keys();
      await Promise.all(cacheNames.map(name => caches.delete(name)));

      // –û—á–∏—â–∞–µ–º localStorage
      const keys = Object.keys(localStorage).filter(key => 
        key.includes('job-') || key.includes('favorites-') || key.includes('settings-')
      );
      keys.forEach(key => localStorage.removeItem(key));

      logger.log('üßπ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π:', error);
    }
  }

  // =================
  // –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  // =================

  async getCacheStats() {
    const stats = {
      cacheSupported: this.isSupported,
      localStorageUsed: 0,
      cacheStorageUsed: 0,
      jobDataCached: 0,
      favoritesCount: 0
    };

    try {
      // LocalStorage —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      let totalSize = 0;
      let jobDataCount = 0;

      Object.keys(localStorage).forEach(key => {
        const size = localStorage.getItem(key)?.length || 0;
        totalSize += size;

        if (key.startsWith('job-')) jobDataCount++;
        if (key === 'favorites-cache') {
          try {
            const data = JSON.parse(localStorage.getItem(key));
            stats.favoritesCount = data.count || 0;
          } catch (e) {}
        }
      });

      stats.localStorageUsed = Math.round(totalSize / 1024); // KB
      stats.jobDataCached = jobDataCount;

      // Cache API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è)
      if (this.isSupported) {
        const cache = await caches.open(this.CACHE_NAME);
        const cachedRequests = await cache.keys();
        stats.cacheStorageUsed = cachedRequests.length;
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞:', error);
    }

    return stats;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.smartCache = new SmartCacheManager();

export default window.smartCache;