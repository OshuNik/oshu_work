// debug-logger.js ‚Äî —É–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç error/warn –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞, —É–±–∏—Ä–∞–µ—Ç debug –ª–æ–≥–∏ –≤ production

(function() {
  'use strict';

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const CFG = window.APP_CONFIG || {};
  const isDev = CFG.NODE_ENV === 'development' || CFG.DEBUG || false;
  const isProd = CFG.NODE_ENV === 'production';

  // –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä
  const logger = {
    // –í–°–ï–ì–î–ê –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞
    error: function(...args) {
      console.error(...args);
      
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º error-monitor
      if (window.errorMonitor && typeof window.errorMonitor.sendError === 'function') {
        try {
          const errorMessage = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
          ).join(' ');
          
          const errorObj = {
            type: 'Debug Logger Error',
            message: errorMessage,
            timestamp: new Date().toISOString(),
            source: 'debug-logger.js',
            stack: (new Error()).stack
          };
          
          window.errorMonitor.sendError(errorObj);
        } catch (e) {
          console.warn('Debug Logger: Failed to send error to monitor:', e);
        }
      }
      
      // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      if (window.telegramMonitoring && typeof window.telegramMonitoring.sendError === 'function') {
        try {
          const errorMessage = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)
          ).join(' ');
          window.telegramMonitoring.sendError(errorMessage);
        } catch (e) {
          // –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }
      }
    },

    // –í–°–ï–ì–î–ê –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –æ–Ω–∏ –≤–∞–∂–Ω—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    warn: function(...args) {
      console.warn(...args);
      
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º error-monitor (warnings —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ errors)
      if (window.errorMonitor && typeof window.errorMonitor.sendError === 'function') {
        try {
          const warnMessage = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
          ).join(' ');
          
          const errorObj = {
            type: 'Debug Logger Warning',
            message: `‚ö†Ô∏è WARNING: ${warnMessage}`,
            timestamp: new Date().toISOString(),
            source: 'debug-logger.js',
            stack: (new Error()).stack
          };
          
          window.errorMonitor.sendError(errorObj);
        } catch (e) {
          console.warn('Debug Logger: Failed to send warning to monitor:', e);
        }
      }
      
      // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      if (window.telegramMonitoring && typeof window.telegramMonitoring.sendWarning === 'function') {
        try {
          const warnMessage = args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)
          ).join(' ');
          window.telegramMonitoring.sendWarning(warnMessage);
        } catch (e) {
          // –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }
      }
    },

    // INFO –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤ development
    info: isDev ? console.info.bind(console) : function() {},
    
    // DEBUG –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤ development
    log: isDev ? console.log.bind(console) : function() {},
    debug: isDev ? console.debug.bind(console) : function() {},

    // TABLE –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    table: isDev ? console.table.bind(console) : function() {},

    // GROUP –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ dev
    group: isDev ? console.group.bind(console) : function() {},
    groupEnd: isDev ? console.groupEnd.bind(console) : function() {},
    groupCollapsed: isDev ? console.groupCollapsed.bind(console) : function() {},

    // ASSERT –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
    assert: console.assert.bind(console),

    // TIME/TIMEEND –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ dev
    time: isDev ? console.time.bind(console) : function() {},
    timeEnd: isDev ? console.timeEnd.bind(console) : function() {},

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    api: {
      success: isDev ? (...args) => console.log('üü¢ API Success:', ...args) : function() {},
      error: (...args) => logger.error('üî¥ API Error:', ...args),
      request: isDev ? (...args) => console.log('üîÑ API Request:', ...args) : function() {},
      response: isDev ? (...args) => console.log('üì• API Response:', ...args) : function() {},
    },

    ui: {
      action: isDev ? (...args) => console.log('üëÜ UI Action:', ...args) : function() {},
      error: (...args) => logger.error('üé® UI Error:', ...args),
      render: isDev ? (...args) => console.log('üñºÔ∏è UI Render:', ...args) : function() {},
    },

    telegram: {
      event: isDev ? (...args) => console.log('üì± Telegram:', ...args) : function() {},
      error: (...args) => logger.error('üì± Telegram Error:', ...args),
      haptic: isDev ? (...args) => console.log('üì≥ Haptic:', ...args) : function() {},
    },

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    when: function(condition, level = 'log') {
      return condition ? logger[level] : function() {};
    },

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ
    getMode: function() {
      return {
        isDev,
        isProd,
        environment: CFG.NODE_ENV,
        debugEnabled: CFG.DEBUG,
        errorsAlwaysLogged: true,
        warningsAlwaysLogged: true
      };
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
  window.logger = logger;

  // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  window.debugLogger = logger;

  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ development
  if (isDev) {
    console.log('üêõ Debug Logger initialized:', logger.getMode());
  }

  // –í production –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –¥–µ—Ç–∞–ª–µ–π)
  if (isProd) {
    console.info('Logger initialized - errors/warnings active');
  }

})();