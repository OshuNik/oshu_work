// error-monitor.js ‚Äî —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –±–æ—Ç

(function() {
  'use strict';

  class ErrorMonitor {
    constructor(config = {}) {
      this.config = {
        botToken: config.botToken || window.APP_CONFIG?.ERROR_BOT_TOKEN,
        chatId: config.chatId || window.APP_CONFIG?.ERROR_CHAT_ID,
        enabled: config.enabled ?? window.APP_CONFIG?.ERROR_MONITOR_ENABLED ?? false,
        maxErrors: config.maxErrors || 10, // –º–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –≤ —á–∞—Å
        throttleMs: config.throttleMs || 300000, // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ—Ö–æ–∂–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
        environment: config.environment || (window.location.hostname === 'localhost' ? 'development' : 'production'),
        appName: config.appName || 'oshu://work',
        version: config.version || '15.1'
      };

      this.errorQueue = [];
      this.sentErrors = new Map(); // –¥–ª—è throttling
      this.hourlyCount = 0;
      this.lastHourReset = Date.now();

      this.init();
    }

    init() {
      if (!this.config.enabled) {
        console.log('üìä Error Monitor: disabled');
        return;
      }

      if (!this.config.botToken || !this.config.chatId) {
        console.warn('üìä Error Monitor: missing bot token or chat ID');
        return;
      }

      // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
      window.addEventListener('error', this.handleError.bind(this));
      window.addEventListener('unhandledrejection', this.handleRejection.bind(this));

      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console.error –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
      this.overrideConsoleError();

      console.log('üìä Error Monitor: initialized for', this.config.environment);
    }

    handleError(event) {
      const error = {
        type: 'JavaScript Error',
        message: event.message || 'Unknown error',
        filename: event.filename || 'unknown',
        lineno: event.lineno || 0,
        colno: event.colno || 0,
        stack: event.error?.stack || 'No stack trace',
        timestamp: new Date().toISOString(),
        url: window.location.href,
        userAgent: navigator.userAgent
      };

      this.reportError(error);
    }

    handleRejection(event) {
      const error = {
        type: 'Unhandled Promise Rejection',
        message: event.reason?.message || String(event.reason) || 'Promise rejected',
        stack: event.reason?.stack || 'No stack trace',
        timestamp: new Date().toISOString(),
        url: window.location.href,
        userAgent: navigator.userAgent
      };

      this.reportError(error);
    }

    overrideConsoleError() {
      const originalError = console.error.bind(console);
      
      console.error = (...args) => {
        // –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console.error
        originalError(...args);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const errorMsg = args.map(arg => 
          typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' ');

        const error = {
          type: 'Console Error',
          message: errorMsg,
          stack: (new Error()).stack || 'No stack trace',
          timestamp: new Date().toISOString(),
          url: window.location.href,
          userAgent: navigator.userAgent
        };

        this.reportError(error);
      };
    }

    reportError(error) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if (!this.shouldReport(error)) {
          return;
        }

        // –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        const enrichedError = this.enrichError(error);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        this.errorQueue.push(enrichedError);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        this.sendError(enrichedError);

      } catch (e) {
        console.warn('Error Monitor: failed to report error', e);
      }
    }

    shouldReport(error) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º hourly limit
      const now = Date.now();
      if (now - this.lastHourReset > 3600000) { // 1 —á–∞—Å
        this.hourlyCount = 0;
        this.lastHourReset = now;
      }

      if (this.hourlyCount >= this.config.maxErrors) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º throttling (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ—à–∏–±–∫–∏)
      const errorKey = `${error.type}:${error.message}:${error.filename}:${error.lineno}`;
      const lastSent = this.sentErrors.get(errorKey);
      
      if (lastSent && now - lastSent < this.config.throttleMs) {
        return false;
      }

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
      if (this.shouldIgnoreError(error)) {
        return false;
      }

      this.sentErrors.set(errorKey, now);
      this.hourlyCount++;
      return true;
    }

    shouldIgnoreError(error) {
      const message = error.message.toLowerCase();
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º extension –æ—à–∏–±–∫–∏
      if (message.includes('chrome-extension') || 
          message.includes('moz-extension') ||
          message.includes('safari-extension')) {
        return true;
      }

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º network timeouts –≤ dev —Ä–µ–∂–∏–º–µ
      if (this.config.environment === 'development' && 
          (message.includes('fetch') || message.includes('network'))) {
        return true;
      }

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ResizeObserver –æ—à–∏–±–∫–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
      if (message.includes('resizeobserver')) {
        return true;
      }

      return false;
    }

    enrichError(error) {
      const enriched = { ...error };

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      enriched.app = {
        name: this.config.appName,
        version: this.config.version,
        environment: this.config.environment
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–±–µ–∑ PII)
      enriched.context = {
        timestamp: new Date().toISOString(),
        url: window.location.href,
        referrer: document.referrer,
        viewport: `${window.innerWidth}x${window.innerHeight}`,
        screen: `${window.screen.width}x${window.screen.height}`,
        online: navigator.onLine,
        language: navigator.language,
        platform: navigator.platform,
        cookieEnabled: navigator.cookieEnabled
      };

      // Telegram WebApp –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (window.Telegram?.WebApp) {
        enriched.telegram = {
          platform: window.Telegram.WebApp.platform,
          version: window.Telegram.WebApp.version,
          themeParams: window.Telegram.WebApp.themeParams,
          isExpanded: window.Telegram.WebApp.isExpanded
        };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ localStorage (–±–µ–∑ sensitive –¥–∞–Ω–Ω—ã—Ö)
      try {
        const safeLocalStorage = {};
        for (let key in localStorage) {
          if (!key.includes('token') && !key.includes('key') && !key.includes('auth')) {
            const value = localStorage.getItem(key);
            if (value && value.length < 100) {
              safeLocalStorage[key] = value;
            }
          }
        }
        enriched.localStorage = safeLocalStorage;
      } catch (e) {
        enriched.localStorage = { error: 'Cannot access localStorage' };
      }

      return enriched;
    }

    async sendError(error) {
      try {
        const message = this.formatTelegramMessage(error);
        
        const response = await fetch(`https://api.telegram.org/bot${this.config.botToken}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            chat_id: this.config.chatId,
            text: message,
            parse_mode: 'HTML',
            disable_web_page_preview: true
          })
        });

        if (!response.ok) {
          console.warn('Error Monitor: failed to send to Telegram', response.status);
        }

      } catch (e) {
        console.warn('Error Monitor: network error sending to Telegram', e);
      }
    }

    formatTelegramMessage(error) {
      const analysis = this.analyzeError(error);
      const env = error.app.environment === 'production' ? 'üåê –°–ê–ô–¢' : 'üíª –¢–ï–°–¢';
      
      // –ó–ê–ì–û–õ–û–í–û–ö - –∫–æ–º–ø–∞–∫—Ç–Ω–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
      let message = `${analysis.priorityEmoji} <b>${error.app.name}</b> ${env} ${analysis.urgencyBadge} ${analysis.categoryBadge}\n\n`;
      
      // –ë–õ–û–ö 1: –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
      message += `üìã <b>–û–®–ò–ë–ö–ê</b>\n`;
      message += `${error.type}: <code>${this.escapeHtml(error.message)}</code>\n`;
      
      if (error.filename && error.filename !== 'unknown') {
        message += `üìç ${error.filename}:${error.lineno}:${error.colno}\n`;
      }
      message += `üïê ${new Date(error.timestamp).toLocaleString('ru')}\n\n`;
      
      // –ë–õ–û–ö 2: –ê–ù–ê–õ–ò–ó - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ
      message += `üéØ <b>–ê–ù–ê–õ–ò–ó</b>\n`;
      message += `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: <b>${analysis.priority}</b> | –í–ª–∏—è–Ω–∏–µ: ${analysis.impact}\n\n`;
      
      // –ë–õ–û–ö 3: –î–ï–ô–°–¢–í–ò–Ø - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ
      if (analysis.quickActions.length > 0) {
        message += `‚ö° <b>–î–ï–ô–°–¢–í–ò–Ø</b>\n`;
        analysis.quickActions.slice(0, 2).forEach((action, i) => {
          message += `${i + 1}. ${action}\n`;
        });
        message += '\n';
      } else if (analysis.recommendations.length > 0) {
        message += `üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò</b>\n`;
        analysis.recommendations.slice(0, 2).forEach((rec, i) => {
          message += `${i + 1}. ${rec}\n`;
        });
        message += '\n';
      }
      
      // –ë–õ–û–ö 4: –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –∫—Ä–∞—Ç–∫–æ
      message += `üîß <b>–ö–û–ù–¢–ï–ö–°–¢</b>\n`;
      if (error.telegram) {
        message += `Telegram ${error.telegram.platform} | `;
      }
      message += `${error.context.platform}\n`;
      message += `–≠–∫—Ä–∞–Ω: ${error.context.viewport} | <a href="${error.context.url}">–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</a>\n\n`;
      
      // –ë–õ–û–ö 5: STACK TRACE - —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (error.stack && analysis.priority === '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô') {
        const stackLines = error.stack.split('\n').slice(0, 3);
        message += `üìç <b>STACK</b>\n<pre>${this.escapeHtml(stackLines.join('\n'))}</pre>\n`;
      }

      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï
      if (analysis.priority === '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô') {
        message += `\nüö® <b>–¢–†–ï–ë–£–ï–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –í–ù–ò–ú–ê–ù–ò–Ø!</b>`;
      }

      // –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (Telegram limit 4096)
      if (message.length > 4000) {
        message = message.substring(0, 3900) + '\n\n...[–æ–±—Ä–µ–∑–∞–Ω–æ]';
      }

      return message;
    }

    analyzeError(error) {
      const message = error.message.toLowerCase();
      const type = error.type;
      const url = error.context?.url || '';
      const stack = error.stack || '';
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      let priority = '–°–†–ï–î–ù–ò–ô';
      let urgency = '–û–ë–´–ß–ù–ê–Ø';
      let impact = '–õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞';
      let frequency = '–ï–¥–∏–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π';
      let category = '–û–±—â–∞—è –æ—à–∏–±–∫–∞';
      let recommendations = [];
      let quickActions = [];

      // –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (this.isCriticalNetworkError(message, type)) {
        priority = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô';
        urgency = '–°–†–û–ß–ù–û';
        impact = '–ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
        category = '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞';
        recommendations = [
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Supabase —Å–µ—Ä–≤–µ—Ä–∞',
          '–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞'
        ];
        quickActions = [
          '–û—Ç–∫—Ä—ã—Ç—å Supabase Dashboard',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞',
          '–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø—Ä–æ–±–ª–µ–º–µ'
        ];
      }
      else if (this.isChunkLoadError(message)) {
        priority = '–í–´–°–û–ö–ò–ô';
        urgency = '–°–†–û–ß–ù–û';
        impact = '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
        category = '–ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        recommendations = [
          '–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–¥–µ–ø–ª–æ–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ CDN/GitHub Pages',
          '–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        ];
        quickActions = [
          '–ó–∞–ø—É—Å—Ç–∏—Ç—å npm run build && git push',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å GitHub Pages —Å—Ç–∞—Ç—É—Å',
          '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞'
        ];
      }
      else if (this.isAuthError(message)) {
        priority = '–í–´–°–û–ö–ò–ô';
        urgency = '–°–†–û–ß–ù–û';
        impact = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è';
        category = '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è';
        recommendations = [
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Supabase Auth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
          '–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API –∫–ª—é—á–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏'
        ];
        quickActions = [
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Supabase Auth –ª–æ–≥–∏',
          '–û–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ'
        ];
      }
      else if (this.isUIError(message, type)) {
        priority = '–°–†–ï–î–ù–ò–ô';
        urgency = '–û–ë–´–ß–ù–ê–Ø';
        impact = '–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º';
        category = 'UI –æ—à–∏–±–∫–∞';
        recommendations = [
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å CSS –∏ JavaScript –∑–∞–≥—Ä—É–∑–∫—É',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö'
        ];
        quickActions = [
          '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å responsive design'
        ];
      }
      else if (this.isStorageError(message)) {
        priority = '–ù–ò–ó–ö–ò–ô';
        urgency = '–ù–ï –°–†–û–ß–ù–û';
        impact = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è';
        category = 'LocalStorage';
        recommendations = [
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–æ—Ç—É localStorage',
          '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å fallback –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞',
          '–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ'
        ];
        quickActions = [
          '–î–æ–±–∞–≤–∏—Ç—å try/catch –¥–ª—è localStorage –æ–ø–µ—Ä–∞—Ü–∏–π'
        ];
      }
      else if (type === 'Console Error') {
        priority = '–ù–ò–ó–ö–ò–ô';
        urgency = '–ù–ï –°–†–û–ß–ù–û';
        impact = '–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
        category = 'Debug';
        recommendations = [
          '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é'
        ];
      }

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
      if (this.sentErrors.size > 5) {
        frequency = '–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏';
        if (priority === '–°–†–ï–î–ù–ò–ô') priority = '–í–´–°–û–ö–ò–ô';
      }

      // –≠–º–æ–¥–∑–∏ –∏ –±–µ–π–¥–∂–∏
      const priorityEmoji = this.getPriorityEmoji(priority);
      const urgencyBadge = this.getUrgencyBadge(urgency);
      const categoryBadge = this.getCategoryBadge(category);

      return {
        priority,
        urgency,
        impact,
        frequency,
        category,
        recommendations,
        quickActions,
        priorityEmoji,
        urgencyBadge,
        categoryBadge
      };
    }

    isCriticalNetworkError(message, type) {
      const networkPatterns = [
        'failed to fetch',
        'network error',
        'connection refused',
        'supabase',
        'timeout',
        'offline'
      ];
      return type.includes('Network') || networkPatterns.some(pattern => message.includes(pattern));
    }

    isChunkLoadError(message) {
      return message.includes('chunk') && (message.includes('load') || message.includes('import'));
    }

    isAuthError(message) {
      const authPatterns = ['auth', 'unauthorized', '401', '403', 'permission', 'token'];
      return authPatterns.some(pattern => message.includes(pattern));
    }

    isUIError(message, type) {
      const uiPatterns = ['element', 'dom', 'render', 'component', 'null', 'undefined'];
      return type === 'JavaScript Error' && uiPatterns.some(pattern => message.includes(pattern));
    }

    isStorageError(message) {
      const storagePatterns = ['localstorage', 'storage', 'quota', 'exceeded'];
      return storagePatterns.some(pattern => message.includes(pattern));
    }

    getPriorityEmoji(priority) {
      switch (priority) {
        case '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô': return 'üî•';
        case '–í–´–°–û–ö–ò–ô': return 'üö®';
        case '–°–†–ï–î–ù–ò–ô': return '‚ö†Ô∏è';
        case '–ù–ò–ó–ö–ò–ô': return '‚ÑπÔ∏è';
        default: return '‚ùì';
      }
    }

    getUrgencyBadge(urgency) {
      switch (urgency) {
        case '–°–†–û–ß–ù–û': return 'üî¥ –°–†–û–ß–ù–û';
        case '–û–ë–´–ß–ù–ê–Ø': return 'üü° –û–ë–´–ß–ù–ê–Ø';
        case '–ù–ï –°–†–û–ß–ù–û': return 'üü¢ –ù–ï –°–†–û–ß–ù–û';
        default: return '‚ö™ –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û';
      }
    }

    getCategoryBadge(category) {
      const badges = {
        '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞': 'üåê –ò–ù–¢–ï–†–ù–ï–¢',
        '–ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏': 'üì¶ –ó–ê–ì–†–£–ó–ö–ê',
        '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è': 'üîê –í–•–û–î',
        'UI –æ—à–∏–±–∫–∞': 'üé® –î–ò–ó–ê–ô–ù',
        'LocalStorage': 'üíæ –ü–ê–ú–Ø–¢–¨',
        'Debug': 'üîç –û–¢–õ–ê–î–ö–ê',
        '–û–±—â–∞—è –æ—à–∏–±–∫–∞': '‚ö†Ô∏è –û–®–ò–ë–ö–ê'
      };
      return badges[category] || '‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–û';
    }

    getErrorEmoji(type) {
      switch (type) {
        case 'JavaScript Error': return 'üí•';
        case 'Unhandled Promise Rejection': return 'üö®';
        case 'Console Error': return '‚ö†Ô∏è';
        case 'Network Error': return 'üåê';
        default: return '‚ùå';
      }
    }

    escapeHtml(text) {
      return String(text)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
    reportCustomError(message, context = {}) {
      const error = {
        type: 'Custom Error',
        message: message,
        stack: (new Error()).stack,
        timestamp: new Date().toISOString(),
        url: window.location.href,
        userAgent: navigator.userAgent,
        customContext: context
      };

      this.reportError(error);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    getStats() {
      return {
        queueSize: this.errorQueue.length,
        hourlyCount: this.hourlyCount,
        throttledErrors: this.sentErrors.size,
        config: { ...this.config, botToken: '[hidden]' }
      };
    }

    // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    setEnabled(enabled) {
      this.config.enabled = enabled;
      console.log(`üìä Error Monitor: ${enabled ? 'enabled' : 'disabled'}`);
    }

    // –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    test() {
      console.log('üß™ Testing Error Monitor...');
      
      // –¢–µ—Å—Ç 1: JavaScript –æ—à–∏–±–∫–∞
      setTimeout(() => {
        console.log('üß™ Test 1: Sending JavaScript error...');
        this.reportCustomError('Test JavaScript Error', {
          test: 'manual_test_js_error',
          timestamp: Date.now()
        });
      }, 1000);
      
      // –¢–µ—Å—Ç 2: Network –æ—à–∏–±–∫–∞
      setTimeout(() => {
        console.log('üß™ Test 2: Sending Network error...');
        this.reportCustomError('Test Network Error', {
          test: 'manual_test_network_error',
          url: 'https://test.example.com/api/test',
          status: 500
        });
      }, 2000);
      
      console.log('üß™ Tests scheduled. Check your Telegram bot for messages.');
      return this.getStats();
    }
  }

  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  window.errorMonitor = new ErrorMonitor();

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –º–æ–¥—É–ª–µ–π
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = ErrorMonitor;
  }

})();