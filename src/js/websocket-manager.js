/**
 * WebSocket Manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ backend WebSocket —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */

class WebSocketManager {
  constructor() {
    this.ws = null;
    this.connected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    this.heartbeatInterval = null;
    
    // URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    this.wsUrl = this.getWebSocketUrl();
    
    console.log('[WebSocket Manager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å URL:', this.wsUrl);
    this.connect();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  getWebSocketUrl() {
    const isLocalhost = window.location.hostname === 'localhost' || 
                       window.location.hostname === '127.0.0.1';
                       
    if (isLocalhost) {
      // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ mock —Å–µ—Ä–≤–µ—Ä—É
      return 'ws://localhost:8081/ws';
    } else {
      // –î–ª—è production - –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π WebSocket —Å–µ—Ä–≤–µ—Ä
      // TODO: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å production WebSocket —Å–µ—Ä–≤–µ—Ä
      console.warn('[WebSocket Manager] Production WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return null;
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   */
  connect() {
    if (!this.wsUrl) {
      console.warn('[WebSocket Manager] WebSocket URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
      return;
    }

    try {
      console.log('[WebSocket Manager] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫', this.wsUrl);
      this.ws = new WebSocket(this.wsUrl);
      
      this.ws.onopen = this.onOpen.bind(this);
      this.ws.onmessage = this.onMessage.bind(this);
      this.ws.onclose = this.onClose.bind(this);
      this.ws.onerror = this.onError.bind(this);
      
    } catch (error) {
      console.error('[WebSocket Manager] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      this.scheduleReconnect();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  onOpen() {
    console.log('‚úÖ [WebSocket Manager] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    this.connected = true;
    this.reconnectAttempts = 0;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
    this.startHeartbeat();
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    document.dispatchEvent(new CustomEvent('websocket:connected', {
      detail: { url: this.wsUrl }
    }));
  }

  /**
   * Validate message structure and content
   */
  isValidMessageType(data) {
    const validTypes = ['welcome', 'vacancy:new', 'search:results', 'pong', 'error', 'status'];
    return validTypes.includes(data.type);
  }

  /**
   * Validate message content based on type
   */
  isValidMessageContent(data) {
    switch (data.type) {
      case 'vacancy:new':
        // Should have id and vacancy data
        return data.data && typeof data.data === 'object' && data.data.id;

      case 'search:results':
        // Should have results array and total
        return (
          data.data &&
          typeof data.data === 'object' &&
          Array.isArray(data.data.results) &&
          typeof data.data.total === 'number'
        );

      case 'error':
        // Should have error message
        return data.data && typeof data.data === 'object' && data.data.message;

      case 'welcome':
      case 'pong':
      case 'status':
        // These can be minimal
        return true;

      default:
        return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  onMessage(event) {
    try {
      // 1. Validate JSON parsing
      let message;
      try {
        message = JSON.parse(event.data);
      } catch (e) {
        console.error('[WebSocket Manager] Invalid JSON received');
        return;
      }

      // 2. Validate message type exists
      if (!message || typeof message !== 'object' || !message.type) {
        console.error('[WebSocket Manager] Message missing type field');
        return;
      }

      // 3. Validate message type is known
      if (!this.isValidMessageType(message)) {
        console.warn('[WebSocket Manager] Unknown message type:', message.type);
        return;
      }

      // 4. Validate message content structure
      if (!this.isValidMessageContent(message)) {
        console.warn('[WebSocket Manager] Invalid content for type:', message.type);
        return;
      }

      console.log('[WebSocket Manager] Valid message received:', message.type);

      // Process message after validation
      switch (message.type) {
        case 'welcome':
          console.log('[WebSocket Manager] Welcome:', message.message);
          break;

        case 'vacancy:new':
          this.handleNewVacancy(message.data);
          break;

        case 'search:results':
          this.handleSearchResults(message.data);
          break;

        case 'pong':
          // Heartbeat –æ—Ç–≤–µ—Ç
          break;

        case 'error':
          console.error('[WebSocket Manager] Server error:', message.data.message);
          break;

        default:
          // Already validated, but safe guard
          console.warn('[WebSocket Manager] Unhandled message type:', message.type);
      }
    } catch (error) {
      console.error('[WebSocket Manager] Unexpected error processing message:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  onClose(event) {
    console.warn(`[WebSocket Manager] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (–∫–æ–¥: ${event.code})`);
    this.connected = false;
    this.stopHeartbeat();
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    document.dispatchEvent(new CustomEvent('websocket:disconnected', {
      detail: { code: event.code, reason: event.reason }
    }));
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (event.code !== 1000) { // –ù–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
      this.scheduleReconnect();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  onError(error) {
    console.error('[WebSocket Manager] WebSocket –æ—à–∏–±–∫–∞:', error);
    
    document.dispatchEvent(new CustomEvent('websocket:error', {
      detail: { error }
    }));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  handleNewVacancy(vacancy) {
    console.log('üì¢ [WebSocket Manager] –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:', vacancy.title);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ vacancy:new –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ UI
    document.dispatchEvent(new CustomEvent('vacancy:new', {
      detail: vacancy,
      bubbles: true
    }));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  handleSearchResults(data) {
    console.log(`üîç [WebSocket Manager] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ${data.results.length} –∏–∑ ${data.total}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞
    document.dispatchEvent(new CustomEvent('search:results', {
      detail: data
    }));
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  send(message) {
    if (!this.connected || !this.ws) {
      console.warn('[WebSocket Manager] –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return false;
    }

    try {
      this.ws.send(JSON.stringify(message));
      return true;
    } catch (error) {
      console.error('[WebSocket Manager] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  sendSearchQuery(query, category = 'all') {
    return this.send({
      type: 'search',
      data: { query, category }
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  startHeartbeat() {
    this.heartbeatInterval = setInterval(() => {
      if (this.connected) {
        this.send({ type: 'ping' });
      }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
   */
  stopHeartbeat() {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  scheduleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('[WebSocket Manager] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ');
      return;
    }

    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts); // Exponential backoff
    this.reconnectAttempts++;
    
    console.log(`[WebSocket Manager] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
    
    setTimeout(() => {
      this.connect();
    }, delay);
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  disconnect() {
    console.log('[WebSocket Manager] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ');
    
    this.stopHeartbeat();
    
    if (this.ws) {
      this.ws.close(1000, '–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  getStatus() {
    return {
      connected: this.connected,
      url: this.wsUrl,
      reconnectAttempts: this.reconnectAttempts,
      readyState: this.ws ? this.ws.readyState : null
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket Manager
window.wsManager = new WebSocketManager();

console.log('[WebSocket Manager] ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π wsManager —Å–æ–∑–¥–∞–Ω');
