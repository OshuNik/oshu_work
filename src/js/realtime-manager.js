/**
 * Realtime Manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Supabase
 * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ INSERT —Å–æ–±—ã—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ vacancies
 */

class RealtimeManager {
  constructor() {
    this.channel = null;
    this.isSubscribed = false;
    this.retryAttempts = 0;
    this.maxRetries = 3;
    
    console.log('[Realtime Manager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    this.init();
  }

  async init() {
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞
    await this.waitForSupabase();
    
    if (!window.supabaseClient) {
      console.error('[Realtime Manager] Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    this.setupVacancySubscription();
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞
   */
  async waitForSupabase() {
    let attempts = 0;
    while (!window.supabaseClient && attempts < 50) {
      console.log(`[Realtime Manager] –û–∂–∏–¥–∞–Ω–∏–µ Supabase –∫–ª–∏–µ–Ω—Ç–∞... ${attempts + 1}/50`);
      await new Promise(resolve => setTimeout(resolve, 100));
      attempts++;
    }

    if (window.supabaseClient) {
      console.log('[Realtime Manager] ‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤');
    } else {
      console.error('[Realtime Manager] ‚ùå Timeout –æ–∂–∏–¥–∞–Ω–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞');
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  setupVacancySubscription() {
    try {
      console.log('[Realtime Manager] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É vacancies...');

      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ vacancies
      this.channel = window.supabaseClient
        .channel('vacancies-changes')
        .on(
          'postgres_changes',
          {
            event: 'INSERT',
            schema: 'public',
            table: 'vacancies'
          },
          (payload) => this.handleNewVacancy(payload)
        )
        .on(
          'postgres_changes', 
          {
            event: 'UPDATE',
            schema: 'public',
            table: 'vacancies'
          },
          (payload) => this.handleVacancyUpdate(payload)
        )
        .subscribe((status) => {
          console.log('[Realtime Manager] –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:', status);
          
          if (status === 'SUBSCRIBED') {
            this.isSubscribed = true;
            console.log('‚úÖ [Realtime Manager] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ realtime
            document.dispatchEvent(new CustomEvent('realtime:ready', {
              detail: { channel: 'vacancies-changes' }
            }));
            
          } else if (status === 'CHANNEL_ERROR') {
            console.error('‚ùå [Realtime Manager] –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ realtime');
            this.handleSubscriptionError();
            
          } else if (status === 'TIMED_OUT') {
            console.error('‚è∞ [Realtime Manager] Timeout –ø–æ–¥–ø–∏—Å–∫–∏ realtime');
            this.handleSubscriptionError();
          }
        });

    } catch (error) {
      console.error('[Realtime Manager] –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      this.handleSubscriptionError();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  handleNewVacancy(payload) {
    const vacancy = payload.new;
    console.log('üéØ [Realtime Manager] –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', {
      id: vacancy.id,
      title: vacancy.reason || vacancy.text_highlighted || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      category: vacancy.ai_category,
      timestamp: vacancy.created_at
    });

    // –î–∏—Å–ø–µ—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ vacancy:new –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    document.dispatchEvent(new CustomEvent('vacancy:new', {
      detail: {
        id: vacancy.id,
        title: vacancy.reason || vacancy.text_highlighted || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        text: vacancy.text_highlighted || vacancy.text || '',
        category: vacancy.ai_category || '–ù–ï –¢–í–û–Å',
        company: vacancy.company_name || '',
        industry: vacancy.industry || '',
        reason: vacancy.reason || '',
        is_new: true,
        timestamp: vacancy.created_at,
        source: 'realtime'
      },
      bubbles: true
    }));

    console.log('üì° [Realtime Manager] –°–æ–±—ã—Ç–∏–µ vacancy:new –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  handleVacancyUpdate(payload) {
    const vacancy = payload.new;
    console.log('üîÑ [Realtime Manager] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:', {
      id: vacancy.id,
      title: vacancy.reason || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    });

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    document.dispatchEvent(new CustomEvent('vacancy:updated', {
      detail: vacancy,
      bubbles: true
    }));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  handleSubscriptionError() {
    this.isSubscribed = false;
    
    if (this.retryAttempts < this.maxRetries) {
      this.retryAttempts++;
      console.log(`[Realtime Manager] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.retryAttempts}/${this.maxRetries}`);
      
      setTimeout(() => {
        this.setupVacancySubscription();
      }, 2000 * this.retryAttempts); // Exponential backoff
    } else {
      console.error('[Realtime Manager] ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ fallback –Ω–∞ WebSocket –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
      document.dispatchEvent(new CustomEvent('realtime:failed', {
        detail: { reason: 'max_retries_exceeded' }
      }));
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  getStatus() {
    return {
      isSubscribed: this.isSubscribed,
      retryAttempts: this.retryAttempts,
      channelState: this.channel?.state || null
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
   */
  disconnect() {
    if (this.channel) {
      console.log('[Realtime Manager] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...');
      window.supabaseClient?.removeChannel(this.channel);
      this.channel.unsubscribe();
      this.channel = null;
    }
    this.isSubscribed = false;
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  reconnect() {
    console.log('[Realtime Manager] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    this.disconnect();
    this.retryAttempts = 0;
    this.setupVacancySubscription();
  }

  /**
   * ‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (cleanup) - —É—Å—Ç—Ä–∞–Ω—è–µ—Ç memory leaks
   */
  cleanup() {
    console.log('[Realtime Manager] üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...');

    // –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª
    this.disconnect();

    // –û—á–∏—Å—Ç–∏—Ç—å retry attempts
    this.retryAttempts = 0;
    this.maxRetries = 0; // Prevent reconnect

    console.log('[Realtime Manager] ‚úÖ Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /**
   * ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  setupAutoCleanup() {
    // Cleanup –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã/–≤–∫–ª–∞–¥–∫–∏
    window.addEventListener('beforeunload', () => {
      this.cleanup();
    });

    // Cleanup –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–¥–ª—è SPA)
    window.addEventListener('pagehide', () => {
      this.cleanup();
    });

    // Cleanup –ø—Ä–∏ –¥–æ–ª–≥–æ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤ background (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    let backgroundTimeout = null;
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π cleanup –µ—Å–ª–∏ > 5 –º–∏–Ω—É—Ç –≤ background
        backgroundTimeout = setTimeout(() => {
          if (document.visibilityState === 'hidden') {
            console.log('[Realtime Manager] App –¥–æ–ª–≥–æ –≤ background, cleanup...');
            this.cleanup();
          }
        }, 300000); // 5 –º–∏–Ω—É—Ç
      } else {
        // –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ foreground - –æ—Ç–º–µ–Ω–∏—Ç—å cleanup
        if (backgroundTimeout) {
          clearTimeout(backgroundTimeout);
          backgroundTimeout = null;
        }

        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if (!this.isSubscribed && this.maxRetries > 0) {
          console.log('[Realtime Manager] –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–∑ background, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
          this.reconnect();
        }
      }
    });

    console.log('[Realtime Manager] ‚úÖ Auto cleanup –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.realtimeManager = new RealtimeManager();

// ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leaks
window.realtimeManager.setupAutoCleanup();

console.log('[Realtime Manager] ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π realtimeManager —Å–æ–∑–¥–∞–Ω —Å auto cleanup');