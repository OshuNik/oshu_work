// vacancy-manager.js ‚Äî –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏

(function() {
  'use strict';

  const CFG = window.APP_CONFIG || {};
  const CONST = window.APP_CONSTANTS || {};
  const UTIL = window.utils || {};

  // Haptic Feedback –¥–ª—è Telegram WebApp (—Ç—Ä–µ–±—É–µ—Ç Bot API 6.1+)
  function triggerHaptic(type, style) {
    try {
      const webApp = window.Telegram?.WebApp;
      if (!webApp?.HapticFeedback) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é (HapticFeedback –¥–æ—Å—Ç—É–ø–µ–Ω —Å –≤–µ—Ä—Å–∏–∏ 6.1+)
      const version = parseFloat(webApp.version || '6.0');
      if (version < 6.1) return;
      
      switch (type) {
        case 'impact':
          webApp.HapticFeedback.impactOccurred(style || 'light');
          break;
        case 'notification':
          webApp.HapticFeedback.notificationOccurred(style || 'success');
          break;
        case 'selection':
          webApp.HapticFeedback.selectionChanged();
          break;
      }
    } catch (e) {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –Ω–µ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
    }
  }

  class VacancyManager {
    constructor() {
      this.updateStatusLocks = new Set();
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async fetchVacanciesForCategory(key, options = {}) {
      const {
        isInitialLoad = false,
        isPullToRefresh = false,
        signal
      } = options;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const stateManager = window.stateManager;
      const domManager = window.domManager;
      
      if (!stateManager || !domManager) {
        throw new Error('–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      }

      if (stateManager.isCategoryBusy(key)) {
        logger.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${key} —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
      const categoryState = stateManager.getCategoryState(key);
      if (!isInitialLoad && !isPullToRefresh && categoryState.offset > 0) {
        const rateResult = await UTIL.checkRateLimit?.('loadVacancies');
        if (rateResult && !rateResult.allowed) {
          UTIL.uiToast?.(rateResult.message);
          return;
        }
      }

      stateManager.setCategoryBusy(key, true);

      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–ª–æ–∞–¥–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (isInitialLoad && categoryState.offset === 0) {
          domManager.showLoader();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º skeleton –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–æ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        if (categoryState.offset === 0 && !isInitialLoad) {
          // Skeleton –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ DOM manager –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
          // –ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
        const apiService = window.apiService;
        if (!apiService) {
          throw new Error('API —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        const limit = CONST?.PAGE_SIZES?.MAIN || CFG.PAGE_SIZE_MAIN || 10;
        const query = stateManager.getState().query;
        
        const result = await apiService.fetchVacancies(
          key, 
          limit, 
          categoryState.offset, 
          query, 
          signal
        );

        if (!result.success) {
          if (result.aborted) {
            this.handleFetchAbort(key, categoryState.offset);
            return;
          }
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
          if (result.severity === 'warning' && result.isRetryable) {
            // –î–ª—è retryable –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
            this.handleRetryableError(key, () => {
              this.fetchVacanciesForCategory(key, isInitialLoad, isPullToRefresh);
            }, result.error);
            return;
          }
          
          throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await this.processVacanciesResult(key, result, isInitialLoad, isPullToRefresh);

      } catch (error) {
        triggerHaptic('notification', 'error');
        this.handleFetchError(key, error, categoryState.offset);
      } finally {
        stateManager.setCategoryBusy(key, false);
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω (–ø—Ä–∏ isInitialLoad)
        if (isInitialLoad && categoryState.offset === 0) {
          domManager.hideLoader();
        }
        document.dispatchEvent(new CustomEvent('feed:loaded'));
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
    async processVacanciesResult(key, result, isInitialLoad, isPullToRefresh = false) {
      const { data: items, total } = result;
      const stateManager = window.stateManager;
      const domManager = window.domManager;
      const state = stateManager.getCategoryState(key);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!Array.isArray(items)) {
        throw new Error('API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
      }

      const validItems = items.filter(item => item && typeof item === 'object' && item.id);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ–≥–¥–∞ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
      if (Number.isFinite(total)) {
        stateManager.updateCategoryState(key, { total });
        domManager.updateCounter(key, total);
      }

      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      if (state.offset === 0) {
        domManager.clearContainer(key);
      }

      const container = domManager.getElement(`containers.${key}`);
      if (!container) {
        throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      if (validItems.length === 0) {
        if (state.offset === 0) {
          const query = stateManager.getState().query;
          const message = query ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '-- –ü—É—Å—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --';
          UTIL.renderEmptyState?.(container, message);
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
        const fragment = document.createDocumentFragment();
        const query = stateManager.getState().query;
        
        for (const item of validItems) {
          const card = UTIL.createVacancyCard?.(item, { 
            pageType: 'main', 
            searchQuery: query 
          });
          if (card) {
            fragment.appendChild(card);
          }
        }

        container.appendChild(fragment);
        domManager.pinLoadMoreToBottom(key);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
        const { btn } = UTIL.ensureLoadMore?.(container, () => {
          this.fetchVacanciesForCategory(key);
        }) || {};

        const newOffset = state.offset + validItems.length;
        const hasMore = newOffset < total;
        
        stateManager.updateCategoryState(key, { offset: newOffset });
        UTIL.updateLoadMore?.(container, hasMore);
        
        if (btn) {
          btn.disabled = !hasMore;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const currentQuery = stateManager.getState().query;
      stateManager.updateCategoryState(key, {
        loadedOnce: true,
        loadedForQuery: currentQuery
      });

      this.updateSearchStats();
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–≥—Ä—É–∑–∫–∏
    handleFetchAbort(key, offset) {
      if (offset === 0) {
        const container = window.domManager?.getElement(`containers.${key}`);
        const message = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        UTIL.renderError?.(container, message, () => {
          this.refetchFromZero(key);
        });
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
    handleFetchError(key, error, offset) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è ${key}:`, error);
      
      if (offset === 0) {
        const container = window.domManager?.getElement(`containers.${key}`);
        let errorMessage = error.message;
        
        if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        }

        UTIL.renderError?.(container, errorMessage, () => {
          this.refetchFromZero(key);
        });
      }
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞—á–∞–ª–∞
    async refetchFromZero(key, isPullToRefresh = false) {
      const stateManager = window.stateManager;
      if (!stateManager || stateManager.isCategoryBusy(key)) {
        return;
      }

      stateManager.updateCategoryState(key, { offset: 0 });
      await this.fetchVacanciesForCategory(key, { isPullToRefresh });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏
    async updateVacancyStatus(vacancyId, newStatus, isFromSwipe = false) {
      logger.log('üîÑ updateVacancyStatus –≤—ã–∑–≤–∞–Ω:', { vacancyId, newStatus, isFromSwipe });
      
      if (!vacancyId) {
        console.warn('ID –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
      }

      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º race conditions
      if (this.updateStatusLocks.has(vacancyId)) {
        logger.log('updateStatus —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è ID:', vacancyId);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
      const operation = newStatus === CFG.STATUSES?.FAVORITE ? 'favorite' : 'updateStatus';
      const rateResult = await UTIL.checkRateLimit?.(operation);
      if (rateResult && !rateResult.allowed) {
        UTIL.uiToast?.(rateResult.message);
        return;
      }

      this.updateStatusLocks.add(vacancyId);

      try {
        const isFavorite = newStatus === CFG.STATUSES?.FAVORITE;
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤–∞–π–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
        if (isFromSwipe) {
          logger.log('üîÑ –≠—Ç–æ —Å–≤–∞–π–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º performSwipeStatusUpdate');
          await this.performSwipeStatusUpdate(vacancyId, newStatus, isFavorite);
        } else {
          logger.log('üîÑ –≠—Ç–æ –∫–Ω–æ–ø–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º performStatusUpdate');
          // –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
          await this.performStatusUpdate(vacancyId, newStatus, isFavorite);
        }

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ updateVacancyStatus:', error);
        triggerHaptic('notification', 'error');
        UTIL.safeAlert?.('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
      } finally {
        this.updateStatusLocks.delete(vacancyId);
      }
    }

    // –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–≤–∞–π–ø–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
    async performSwipeStatusUpdate(vacancyId, newStatus, isFavorite) {
      logger.log('üîÑ performSwipeStatusUpdate –≤—ã–∑–≤–∞–Ω:', { vacancyId, newStatus, isFavorite });
      
      const cardElement = document.querySelector(`#card-${CSS.escape(vacancyId)}`);
      if (!cardElement) {
        console.warn('–ö–∞—Ä—Ç–æ—á–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', vacancyId);
        return;
      }

      const parent = cardElement.parentElement;
      const nextSibling = cardElement.nextElementSibling;

      // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
      this.animateCardHidingForSwipe(cardElement);
      logger.log('‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è —Å–≤–∞–π–ø–∞');

      // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Å transition-–∞–Ω–∏–º–∞—Ü–∏–µ–π –≤—ä–µ–∑–¥–∞ (–∫–∞–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º)
      const onUndo = () => {
        logger.log('üîÑ –û—Ç–º–µ–Ω–∞ —Å–≤–∞–π–ø–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancyId);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ
        parent.insertBefore(cardElement, nextSibling);
        
        requestAnimationFrame(() => {
          // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤–∞–π–ø-–∫–ª–∞—Å—Å—ã —á—Ç–æ–±—ã –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ª–∏—Ç–æ–π
          cardElement.classList.remove('swipe-left', 'swipe-right');
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ overlays
          const overlays = cardElement.querySelectorAll('.swipe-action-overlay');
          overlays.forEach(overlay => {
            overlay.classList.remove('visible');
            overlay.style.opacity = '0';
          });
          
          // –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–≤–∞–π–ø–æ–≤ (–∫–∞–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º)
          cardElement.style.transition = 'opacity .3s, transform .3s, max-height .3s, margin .3s, padding .3s, border-width .3s';
          cardElement.style.opacity = '1';
          cardElement.style.transform = 'translate3d(0, 0, 0)'; // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –º–µ—Å—Ç–æ (–∫–∞–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –¥–ª—è —Å–≤–∞–π–ø–æ–≤)
          cardElement.style.maxHeight = '500px';
          cardElement.style.paddingTop = '';
          cardElement.style.paddingBottom = '';
          cardElement.style.marginTop = '';
          cardElement.style.marginBottom = '';
          cardElement.style.borderWidth = '';
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∏–ª–∏ background –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å
          cardElement.style.background = '';
          cardElement.style.backgroundColor = '';
          cardElement.style.removeProperty('background');
          cardElement.style.removeProperty('background-color');
          
          // –£–±–∏—Ä–∞–µ–º transition –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
          setTimeout(() => {
            cardElement.style.transition = '';
            logger.log('‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancyId);
          }, 300);
        });
      };

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–≤–∞–π–ø–æ–≤
      const toastMessage = isFavorite ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞';
      
      // Haptic feedback –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      if (isFavorite) {
        triggerHaptic('notification', 'success');
      } else {
        triggerHaptic('impact', 'medium');
      }
      
      logger.log('üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–≤–∞–π–ø–∞');
      UTIL.uiToast?.(toastMessage, {
        timeout: 5000,
        onUndo,
        onTimeout: async () => {
          logger.log('‚è∞ –¢–∞–π–º–∞—É—Ç toast –¥–ª—è —Å–≤–∞–π–ø–∞, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ:', vacancyId);
          await this.finalizeStatusUpdate(vacancyId, newStatus, cardElement, parent);
        }
      });
    }

    // –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    async performStatusUpdate(vacancyId, newStatus, isFavorite) {
      const cardElement = document.querySelector(`#card-${CSS.escape(vacancyId)}`);
      if (!cardElement) {
        console.warn('–ö–∞—Ä—Ç–æ—á–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', vacancyId);
        return;
      }

      // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
      this.animateCardHiding(cardElement);

      const parent = cardElement.parentElement;
      const nextSibling = cardElement.nextElementSibling;

      // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Å transition-–∞–Ω–∏–º–∞—Ü–∏–µ–π –≤—ä–µ–∑–¥–∞ (–∫–∞–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º)
      const onUndo = () => {
        parent.insertBefore(cardElement, nextSibling);
        requestAnimationFrame(() => {
          // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤–∞–π–ø-–∫–ª–∞—Å—Å—ã —á—Ç–æ–±—ã –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ª–∏—Ç–æ–π
          cardElement.classList.remove('swipe-left', 'swipe-right');
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ overlays
          const overlays = cardElement.querySelectorAll('.swipe-action-overlay');
          overlays.forEach(overlay => {
            overlay.classList.remove('visible');
            overlay.style.opacity = '0';
          });
          
          cardElement.style.transition = 'opacity .3s, transform .3s, max-height .3s, margin .3s, padding .3s, border-width .3s';
          cardElement.style.opacity = '1';
          cardElement.style.transform = 'scale(1)';
          cardElement.style.maxHeight = '500px';
          cardElement.style.paddingTop = '';
          cardElement.style.paddingBottom = '';
          cardElement.style.marginTop = '';
          cardElement.style.marginBottom = '';
          cardElement.style.borderWidth = '';
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∏–ª–∏ background –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å
          cardElement.style.background = '';
          cardElement.style.backgroundColor = '';
          cardElement.style.removeProperty('background');
          cardElement.style.removeProperty('background-color');
          
          // –£–±–∏—Ä–∞–µ–º transition –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
          setTimeout(() => {
            cardElement.style.transition = '';
          }, 300);
        });
      };

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
      const toastMessage = isFavorite ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞';
      
      // Haptic feedback –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      if (isFavorite) {
        triggerHaptic('notification', 'success');
      } else {
        triggerHaptic('impact', 'medium');
      }
      
      UTIL.uiToast?.(toastMessage, {
        timeout: 5000,
        onUndo,
        onTimeout: async () => {
          await this.finalizeStatusUpdate(vacancyId, newStatus, cardElement, parent);
        }
      });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–∫–∞–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º)
    animateCardHiding(cardElement) {
      // –ë–ï–ó transform - —Ç–æ–ª—å–∫–æ –ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ (–∫–∞–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –¥–ª—è –∫–Ω–æ–ø–æ–∫)
      cardElement.style.transition = 'opacity .3s, max-height .3s, margin .3s, padding .3s, border-width .3s';
      cardElement.style.opacity = '0';
      cardElement.style.maxHeight = '0px';
      cardElement.style.paddingTop = '0';
      cardElement.style.paddingBottom = '0';
      cardElement.style.marginTop = '0';
      cardElement.style.marginBottom = '0';
      cardElement.style.borderWidth = '0';
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–≤–∞–π–ø–æ–≤ (–∫–∞–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –¥–ª—è —Å–≤–∞–π–ø–æ–≤)
    animateCardHidingForSwipe(cardElement) {
      // –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º transform - –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ swipe-handler
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ opacity –∏ maxHeight –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
      cardElement.style.transition = 'opacity .3s, max-height .3s, margin .3s, padding .3s, border-width .3s';
      cardElement.style.opacity = '0';
      cardElement.style.maxHeight = '0px';
      cardElement.style.paddingTop = '0';
      cardElement.style.paddingBottom = '0';
      cardElement.style.marginTop = '0';
      cardElement.style.marginBottom = '0';
      cardElement.style.borderWidth = '0';
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å transition
    animateCardShowing(cardElement) {
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤–∞–π–ø-–∫–ª–∞—Å—Å—ã —á—Ç–æ–±—ã –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ª–∏—Ç–æ–π
      cardElement.classList.remove('swipe-left', 'swipe-right');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ overlays
      const overlays = cardElement.querySelectorAll('.swipe-action-overlay');
      overlays.forEach(overlay => {
        overlay.classList.remove('visible');
        overlay.style.opacity = '0';
      });
      
      cardElement.style.transition = 'opacity .3s, transform .3s, max-height .3s, margin .3s, padding .3s, border-width .3s';
      cardElement.style.opacity = '1';
      cardElement.style.transform = 'scale(1)';
      cardElement.style.maxHeight = '500px';
      cardElement.style.paddingTop = '';
      cardElement.style.paddingBottom = '';
      cardElement.style.marginTop = '';
      cardElement.style.marginBottom = '';
      cardElement.style.borderWidth = '';
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∏–ª–∏ background –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å
      cardElement.style.background = '';
      cardElement.style.backgroundColor = '';
      cardElement.style.removeProperty('background');
      cardElement.style.removeProperty('background-color');
      
      // –£–±–∏—Ä–∞–µ–º transition –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        cardElement.style.transition = '';
      }, 300);
    }

    // –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    async finalizeStatusUpdate(vacancyId, newStatus, cardElement, parentContainer) {
      try {
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ DOM
        cardElement.remove();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ API
        const apiService = window.apiService;
        const result = await apiService?.updateVacancyStatus(vacancyId, newStatus);
        
        if (!result?.success) {
          throw new Error(result?.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        const stateManager = window.stateManager;
        const activeKey = stateManager?.getState().activeKey;
        if (activeKey) {
          const categoryState = stateManager.getCategoryState(activeKey);
          if (categoryState.total > 0) {
            const newTotal = categoryState.total - 1;
            stateManager.updateCategoryState(activeKey, { total: newTotal });
            window.domManager?.updateCounter(activeKey, newTotal);
          }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π
        if (parentContainer && parentContainer.querySelectorAll('.vacancy-card').length === 0) {
          UTIL.renderEmptyState?.(parentContainer, '-- –ü—É—Å—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --');
        }

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        UTIL.safeAlert?.('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        parentContainer.insertBefore(cardElement, parentContainer.firstChild);
        this.animateCardShowing(cardElement);
      }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateSearchStats() {
      const stateManager = window.stateManager;
      const domManager = window.domManager;
      
      if (!stateManager || !domManager) return;

      const state = stateManager.getState();
      const activeContainer = domManager.getElement(`containers.${state.activeKey}`);
      
      if (!activeContainer) return;

      const visible = activeContainer.querySelectorAll('.vacancy-card').length;
      const categoryState = stateManager.getCategoryState(state.activeKey);
      const total = categoryState.total || visible;

      domManager.updateSearchStats(visible, total, state.query);
    }

    // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async bulkDeleteCategory(key) {
      const confirmed = await UTIL.showCustomConfirm?.('–£–¥–∞–ª–∏—Ç—å –í–°–ï –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?');
      if (!confirmed) return;

      try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bulk –æ–ø–µ—Ä–∞—Ü–∏–∏
        const params = new URLSearchParams();
        params.set('status', `eq.${CFG.STATUSES?.NEW}`);
        
        if (key === 'main') {
          params.set('category', `eq.${CFG.CATEGORIES?.MAIN}`);
        } else if (key === 'maybe') {
          params.set('category', `eq.${CFG.CATEGORIES?.MAYBE}`);
        } else {
          params.set('category', `not.in.("${CFG.CATEGORIES?.MAIN}","${CFG.CATEGORIES?.MAYBE}")`);
        }

        const url = `${CFG.SUPABASE_URL}/rest/v1/vacancies?${params.toString()}`;
        const headers = UTIL.createSupabaseHeaders?.({ prefer: 'return=minimal' });
        
        const response = await UTIL.fetchWithRetry?.(url, {
          method: 'PATCH',
          headers,
          body: JSON.stringify({ status: CFG.STATUSES?.DELETED }),
        }, CFG.RETRY_OPTIONS);

        if (!response.ok) {
          throw new Error(`${response.status} ${response.statusText}`);
        }

        // –û—á–∏—â–∞–µ–º UI
        window.domManager?.clearContainer(key);
        window.domManager?.hideLoadMore(key);
        window.domManager?.updateCounter(key, 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.stateManager?.updateCategoryState(key, {
          offset: 0,
          total: 0,
          loadedOnce: true,
          loadedForQuery: window.stateManager.getState().query
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const container = window.domManager?.getElement(`containers.${key}`);
        UTIL.renderEmptyState?.(container, '-- –ü—É—Å—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --');
        
        UTIL.uiToast?.('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        UTIL.safeAlert?.('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å retryable –æ—à–∏–±–∫—É
    handleRetryableError(key, retryCallback, errorMessage) {
      const domManager = window.domManager;
      const container = domManager.getElement(`containers.${key}`);
      
      if (!container) return;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∞
      UTIL.renderError?.(container, errorMessage, retryCallback);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      if (window.networkManager) {
        window.networkManager.addToRetryQueue({
          callback: retryCallback,
          category: key,
          type: 'fetch_vacancies'
        });
      }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    getStats() {
      return {
        activeLocks: this.updateStatusLocks.size,
        lockedVacancies: Array.from(this.updateStatusLocks)
      };
    }
  }

  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
  window.vacancyManager = new VacancyManager();

})();