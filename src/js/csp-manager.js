// csp-manager.js ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Content Security Policy

(function() {
  'use strict';

  class CSPManager {
    constructor() {
      this.nonce = this.generateNonce();
      this.violations = [];
      this.setupViolationReporting();
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π nonce
    generateNonce() {
      const array = new Uint8Array(16);
      if (window.crypto && window.crypto.getRandomValues) {
        try {
          window.crypto.getRandomValues(array);
        } catch (error) {
          console.warn('‚ö†Ô∏è CSP: Crypto API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
          // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
          for (let i = 0; i < array.length; i++) {
            array[i] = Math.floor(Math.random() * 256);
          }
        }
      } else {
        console.warn('‚ö†Ô∏è CSP: Limited CSP support in this browser - crypto API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        for (let i = 0; i < array.length; i++) {
          array[i] = Math.floor(Math.random() * 256);
        }
      }
      return btoa(String.fromCharCode.apply(null, array));
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–≥–∏–π CSP
    enforceStrictCSP() {
      const cspPolicy = this.buildCSPPolicy();
      
      // CSP —á–µ—Ä–µ–∑ meta tag –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      const metaCSPPolicy = this.buildMetaCSPPolicy();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ meta tag (–±–µ–∑ frame-ancestors –∏ –¥—Ä—É–≥–∏—Ö server-only –¥–∏—Ä–µ–∫—Ç–∏–≤)
      const existingCSP = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
      if (existingCSP) {
        existingCSP.content = metaCSPPolicy;
      } else {
        const meta = document.createElement('meta');
        meta.setAttribute('http-equiv', 'Content-Security-Policy');
        meta.content = metaCSPPolicy;
        document.head.insertBefore(meta, document.head.firstChild);
      }

      console.log('üõ°Ô∏è CSP enforced via meta tag:', metaCSPPolicy);
      console.log('‚ö†Ô∏è Note: Some directives (frame-ancestors, block-all-mixed-content) require HTTP headers');
    }

    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å CSP –ø–æ–ª–∏—Ç–∏–∫—É
    buildCSPPolicy() {
      const policy = [
        // –ë–∞–∑–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        `default-src 'self'`,
        
        // –°–∫—Ä–∏–ø—Ç—ã: —Ä–∞–∑—Ä–µ—à–∞–µ–º inline handlers + CDN (–±–µ–∑ nonce —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å unsafe-inline)
        `script-src 'self' 'unsafe-inline' 'unsafe-hashes' https://telegram.org https://unpkg.com https://cdnjs.cloudflare.com https://cdn.interactjs.io`,
        
        // –°—Ç–∏–ª–∏: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ + Google Fonts + Bootstrap Icons + inline —Å—Ç–∏–ª–∏
        `style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net`,
        
        // –®—Ä–∏—Ñ—Ç—ã: Google Fonts + Bootstrap Icons
        `font-src 'self' https://fonts.gstatic.com https://cdn.jsdelivr.net`,
        
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ + GitHub + data URLs –¥–ª—è base64
        `img-src 'self' data: https://raw.githubusercontent.com https://oshu-vacancies.github.io https://github.com`,
        
        // –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: Supabase API + Socket.IO CDN + WebSocket —Å–µ—Ä–≤–µ—Ä—ã + Telegram Bot API
        `connect-src 'self' https://*.supabase.co wss://*.supabase.co https://cdn.socket.io https://unpkg.com https://cdnjs.cloudflare.com https://api.telegram.org wss://localhost:* ws://localhost:* wss://*.oshuwork.ru https://*.oshuwork.ru wss://* ws://*`,
        
        // –ú–µ–¥–∏–∞: —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
        `media-src 'self'`,
        
        // –û–±—ä–µ–∫—Ç—ã: –∑–∞–ø—Ä–µ—â–µ–Ω—ã (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ Flash, etc.)
        `object-src 'none'`,
        
        // –ë–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã: —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
        `base-uri 'self'`,
        
        // –§–æ—Ä–º—ã: —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω
        `form-action 'self'`,
        
        // –§—Ä–µ–π–º—ã: —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤ Telegram
        `frame-ancestors 'self' https://web.telegram.org https://telegram.org`,
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        `upgrade-insecure-requests`,
        
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ mixed content
        `block-all-mixed-content`
      ];

      return policy.join('; ');
    }

    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å CSP –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è meta tag (–±–µ–∑ server-only –¥–∏—Ä–µ–∫—Ç–∏–≤)
    buildMetaCSPPolicy() {
      const policy = [
        // –ë–∞–∑–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        `default-src 'self'`,
        
        // –°–∫—Ä–∏–ø—Ç—ã: —Ä–∞–∑—Ä–µ—à–∞–µ–º inline handlers + CDN (–±–µ–∑ nonce —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å unsafe-inline)
        `script-src 'self' 'unsafe-inline' 'unsafe-hashes' https://telegram.org https://unpkg.com https://cdnjs.cloudflare.com https://cdn.interactjs.io`,
        
        // –°—Ç–∏–ª–∏: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ + Google Fonts + Bootstrap Icons + inline —Å—Ç–∏–ª–∏
        `style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net`,
        
        // –®—Ä–∏—Ñ—Ç—ã: Google Fonts + Bootstrap Icons
        `font-src 'self' https://fonts.gstatic.com https://cdn.jsdelivr.net`,
        
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ + GitHub + data URLs –¥–ª—è base64
        `img-src 'self' data: https://raw.githubusercontent.com https://oshu-vacancies.github.io https://github.com`,
        
        // –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: Supabase API + Socket.IO CDN + WebSocket —Å–µ—Ä–≤–µ—Ä—ã + Telegram Bot API
        `connect-src 'self' https://*.supabase.co wss://*.supabase.co https://cdn.socket.io https://unpkg.com https://cdnjs.cloudflare.com https://api.telegram.org wss://localhost:* ws://localhost:* wss://*.oshuwork.ru https://*.oshuwork.ru wss://* ws://*`,
        
        // –ú–µ–¥–∏–∞: —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
        `media-src 'self'`,
        
        // –û–±—ä–µ–∫—Ç—ã: –∑–∞–ø—Ä–µ—â–µ–Ω—ã (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ Flash, etc.)
        `object-src 'none'`,
        
        // –ë–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã: —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
        `base-uri 'self'`,
        
        // –§–æ—Ä–º—ã: —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω  
        `form-action 'self'`
        
        // –ù–ï –≤–∫–ª—é—á–∞–µ–º frame-ancestors, upgrade-insecure-requests, block-all-mixed-content
        // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ meta tags
      ];

      return policy.join('; ');
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å nonce –∫ inline —Å–∫—Ä–∏–ø—Ç–∞–º
    applyNonceToScripts() {
      const inlineScripts = document.querySelectorAll('script:not([src])');
      inlineScripts.forEach(script => {
        if (!script.hasAttribute('nonce')) {
          script.setAttribute('nonce', this.nonce);
        }
      });
    }

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å nonce –∫ inline —Å—Ç–∏–ª—è–º
    applyNonceToStyles() {
      const inlineStyles = document.querySelectorAll('style');
      inlineStyles.forEach(style => {
        if (!style.hasAttribute('nonce')) {
          style.setAttribute('nonce', this.nonce);
        }
      });
    }

    // –°–æ–∑–¥–∞—Ç—å style —ç–ª–µ–º–µ–Ω—Ç —Å nonce
    createStyleElement() {
      const style = document.createElement('style');
      style.setAttribute('nonce', this.nonce);
      return style;
    }

    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
    setupViolationReporting() {
      document.addEventListener('securitypolicyviolation', (e) => {
        const violation = {
          blockedURI: e.blockedURI,
          violatedDirective: e.violatedDirective,
          originalPolicy: e.originalPolicy,
          documentURI: e.documentURI,
          timestamp: Date.now(),
          userAgent: navigator.userAgent
        };

        this.violations.push(violation);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.warn('üö® CSP Violation:', violation);
        
        // –í production –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (this.shouldReportViolation(violation)) {
          this.reportViolation(violation);
        }
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
    shouldReportViolation(violation) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ false positives
      const ignoredSources = [
        'chrome-extension:',
        'moz-extension:',
        'safari-extension:',
        'about:blank'
      ];

      return !ignoredSources.some(source => 
        violation.blockedURI.startsWith(source)
      );
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
    async reportViolation(violation) {
      try {
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å reporting endpoint
        console.log('üìä Would report CSP violation:', violation);
        
        // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ):
        // await fetch('/csp-report', {
        //   method: 'POST',
        //   headers: { 'Content-Type': 'application/json' },
        //   body: JSON.stringify(violation)
        // });
        
      } catch (error) {
        console.warn('Failed to report CSP violation:', error);
      }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Ä—É—à–µ–Ω–∏–π
    getViolationStats() {
      const stats = {};
      
      this.violations.forEach(violation => {
        const directive = violation.violatedDirective;
        stats[directive] = (stats[directive] || 0) + 1;
      });

      return {
        totalViolations: this.violations.length,
        byDirective: stats,
        violations: this.violations
      };
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π nonce
    getNonce() {
      return this.nonce;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞ —Å CSP
    checkBrowserSupport() {
      const features = {
        csp: 'securitypolicyviolation' in document,
        crypto: !!(window.crypto && window.crypto.getRandomValues),
        nonce: true // –í—Å–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç nonce
      };

      const isSupported = Object.values(features).every(Boolean);
      
      return {
        supported: isSupported,
        features
      };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSP –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    init() {
      const support = this.checkBrowserSupport();
      
      if (!support.supported) {
        console.warn('‚ö†Ô∏è Limited CSP support in this browser:', support.features);
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º nonce –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
      this.applyNonceToScripts();
      this.applyNonceToStyles();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –ø–æ–ª–∏—Ç–∏–∫—É
      this.enforceStrictCSP();

      console.log('‚úÖ CSP Manager initialized with nonce:', this.nonce);
    }
  }

  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  window.cspManager = new CSPManager();

})();