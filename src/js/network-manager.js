// network-manager.js ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ offline —Ä–µ–∂–∏–º–∞

(function() {
  'use strict';

  const UTIL = window.utils || {};

  class NetworkManager {
    constructor() {
      this.isOnline = navigator.onLine;
      this.offlineIndicator = null;
      this.retryQueue = [];
      this.maxRetries = 3;
      this.retryDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

      this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
      this.createOfflineIndicator();
      this.bindNetworkEvents();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      this.updateNetworkStatus();
    }

    // –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä offline —Ä–µ–∂–∏–º–∞
    createOfflineIndicator() {
      this.offlineIndicator = document.createElement('div');
      this.offlineIndicator.className = 'offline-indicator hidden';
      this.offlineIndicator.innerHTML = `
        <div class="offline-content">
          <span class="offline-icon">üì∂</span>
          <span class="offline-text">–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</span>
          <button class="offline-retry-btn" type="button">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
        </div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ body
      document.body.appendChild(this.offlineIndicator);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
      const retryBtn = this.offlineIndicator.querySelector('.offline-retry-btn');
      retryBtn?.addEventListener('click', () => {
        this.checkConnection();
      });
    }

    // –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å–µ—Ç–∏
    bindNetworkEvents() {
      window.addEventListener('online', () => {
        this.handleOnline();
      });

      window.addEventListener('offline', () => {
        this.handleOffline();
      });

      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setInterval(() => {
        this.checkConnection();
      }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ online
    handleOnline() {
      this.isOnline = true;
      this.hideOfflineIndicator();
      this.processRetryQueue();

      if (UTIL.uiToast) {
        UTIL.uiToast('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', { timeout: 2000 });
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ offline
    handleOffline() {
      this.isOnline = false;
      this.showOfflineIndicator();

      if (UTIL.uiToast) {
        UTIL.uiToast('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', { 
          timeout: 0 // –ù–µ —Å–∫—Ä—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        });
      }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä offline
    showOfflineIndicator() {
      if (this.offlineIndicator) {
        this.offlineIndicator.classList.remove('hidden');
        this.offlineIndicator.classList.add('visible');
      }
    }

    // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä offline
    hideOfflineIndicator() {
      if (this.offlineIndicator) {
        this.offlineIndicator.classList.remove('visible');
        this.offlineIndicator.classList.add('hidden');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    async checkConnection() {
      try {
        const response = await fetch('/favicon.ico', {
          method: 'HEAD',
          cache: 'no-cache',
          signal: AbortSignal.timeout(5000)
        });
        
        if (response.ok && !this.isOnline) {
          this.handleOnline();
        }
      } catch (error) {
        if (this.isOnline) {
          this.handleOffline();
        }
      }
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–∞
    addToRetryQueue(request) {
      if (this.retryQueue.length < 10) { // –õ–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏
        this.retryQueue.push({
          ...request,
          timestamp: Date.now(),
          attempts: 0
        });
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–∞
    async processRetryQueue() {
      if (!this.isOnline || this.retryQueue.length === 0) {
        return;
      }

      const queue = [...this.retryQueue];
      this.retryQueue = [];

      for (const request of queue) {
        if (request.attempts < this.maxRetries) {
          try {
            await this.retryRequest(request);
          } catch (error) {
            request.attempts++;
            if (request.attempts < this.maxRetries) {
              this.retryQueue.push(request);
            }
          }
        }
      }
    }

    // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    async retryRequest(request) {
      const delay = this.retryDelay * Math.pow(2, request.attempts);
      await new Promise(resolve => setTimeout(resolve, delay));

      if (request.callback && typeof request.callback === 'function') {
        return request.callback();
      }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
    updateNetworkStatus() {
      const currentStatus = navigator.onLine;
      
      if (currentStatus !== this.isOnline) {
        if (currentStatus) {
          this.handleOnline();
        } else {
          this.handleOffline();
        }
      }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
    getNetworkStatus() {
      return {
        isOnline: this.isOnline,
        queueSize: this.retryQueue.length
      };
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–∞
    clearRetryQueue() {
      this.retryQueue = [];
    }

    // –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
    destroy() {
      if (this.offlineIndicator) {
        this.offlineIndicator.remove();
      }

      window.removeEventListener('online', this.handleOnline);
      window.removeEventListener('offline', this.handleOffline);

      this.clearRetryQueue();
    }
  }

  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  window.networkManager = new NetworkManager();

})();